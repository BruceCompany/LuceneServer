<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkSocket</name>
    </assembly>
    <members>
        <member name="T:NetworkSocket.ByteRange">
            <summary>
            表示字节数组范围
            不可继承
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteRange.#ctor(System.Byte[])">
            <summary>
            表示字节数组范围
            </summary>
            <param name="buffer">字节数组</param>   
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.ByteRange.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            表示字节数组范围
            </summary>
            <param name="buffer">字节数组</param>
            <param name="offset">偏移量</param>
            <param name="count">字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ByteRange.SplitBySize(System.Int32)">
            <summary>
            分割为大小相等的ByteRange集合
            </summary>
            <param name="size">新的ByteRange大小</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteRange.op_Implicit(System.Byte[])~NetworkSocket.ByteRange">
            <summary>
            从byte[]隐式转换
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.ByteRange.Offset">
            <summary>
            获取偏移量
            </summary>
        </member>
        <member name="P:NetworkSocket.ByteRange.Count">
            <summary>
            获取字节数
            </summary>
        </member>
        <member name="P:NetworkSocket.ByteRange.Buffer">
            <summary>
            获取字节数组
            </summary>
        </member>
        <member name="T:NetworkSocket.ByteRange.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.ByteRange.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteRange.DebugView.#ctor(NetworkSocket.ByteRange)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.ByteRange.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.ByteBits">
            <summary>
            byte的位集合
            位索引为高位到低位顺序
            </summary>
        </member>
        <member name="F:NetworkSocket.ByteBits.value">
            <summary>
            字节值
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteBits.MoveRight(System.Int32)">
            <summary>
            右移运算
            </summary>
            <param name="count">移动位数</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.MoveLeft(System.Int32)">
            <summary>
            左移运算
            </summary>
            <param name="count">移动位数</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.Take(System.Int32)">
            <summary>
            取高位
            相当于右移8-count个单位
            </summary>
            <param name="count">位的数量</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.Take(System.Int32,System.Int32)">
            <summary>
            从指定索引位置取高位
            相当于先左移index个单位再右移8-count个单位
            </summary>
            <param name="index">索引</param>
            <param name="count">位的数量</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.#ctor(System.Byte)">
            <summary>
            byte的位集合
            </summary>
            <param name="value">字节</param>
        </member>
        <member name="M:NetworkSocket.ByteBits.ToString">
            <summary>
            字符串显示各个位的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.op_Implicit(System.Byte)~NetworkSocket.ByteBits">
            <summary>
            从byte类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.op_Implicit(NetworkSocket.ByteBits)~System.Byte">
            <summary>
            隐式转换为byte类型
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.Equals(System.Object)">
            <summary>
            比较是否和目标相等
            </summary>
            <param name="obj">目标</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBits.System#IComparable{NetworkSocket#ByteBits}#CompareTo(NetworkSocket.ByteBits)">
            <summary>
            比较
            </summary>
            <param name="other">目标</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.ByteBits.Item(System.Int32)">
            <summary>
            获取或设置指定位的值
            </summary>
            <param name="index">由高到低的位索引</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.ByteBits.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.ByteBits.DebugView.bits">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteBits.DebugView.#ctor(NetworkSocket.ByteBits)">
            <summary>
            调试视图
            </summary>
            <param name="bits">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.ByteBits.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.ByteBuilder">
            <summary>
            提供二进制数据生成支持      
            非线程安全类型  
            </summary>
        </member>
        <member name="F:NetworkSocket.ByteBuilder._capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="F:NetworkSocket.ByteBuilder._buffer">
            <summary>
            当前数据
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.#ctor(NetworkSocket.Endians)">
            <summary>
            提供二进制数据读取和操作支持
            </summary>
            <param name="endian">字节存储次序</param>       
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Boolean)">
            <summary>
            添加一个bool类型
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Byte)">
            <summary>
            添加一个字节
            </summary>
            <param name="value">字节</param>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Int16)">
            <summary>
            将16位整数转换为byte数组再添加
            </summary>
            <param name="value">整数</param>        
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.UInt16)">
            <summary>
            将16位整数转换为byte数组再添加
            </summary>
            <param name="value">整数</param>        
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Int32)">
            <summary>
            将32位整数转换为byte数组再添加
            </summary>
            <param name="value">整数</param>        
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.UInt32)">
            <summary>
            将32位整数转换为byte数组再添加
            </summary>
            <param name="value">整数</param>        
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Int64)">
            <summary>
            将64位整数转换为byte数组再添加
            </summary>
            <param name="value">整数</param>        
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.UInt64)">
            <summary>
            将64位整数转换为byte数组再添加
            </summary>
            <param name="value">整数</param>        
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Byte[])">
            <summary>
            添加指定数据数组
            </summary>
            <param name="array">数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.Add(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加指定数据数组
            </summary>
            <param name="array">数组</param>
            <param name="offset">数组的偏移量</param>
            <param name="count">字节数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.ExpandCapacity(System.Int32)">
            <summary>
            扩容
            </summary>
            <param name="newLength">满足的新大小</param>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.CopyTo(System.Byte[],System.Int32)">
            <summary>
            将指定长度的数据复制到目标数组
            </summary>
            <param name="dstArray">目标数组</param>     
            <param name="count">要复制的字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.CopyTo(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将指定长度的数据复制到目标数组
            </summary>
            <param name="dstArray">目标数组</param>
            <param name="dstOffset">目标数组偏移量</param>
            <param name="count">要复制的字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定偏移位置将数据复制到目标数组
            </summary>
            <param name="srcOffset">偏移量</param>
            <param name="dstArray">目标数组</param>
            <param name="dstOffset">目标数组偏移量</param>
            <param name="count">要复制的字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.ToArray">
            <summary>
            转换为byte数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.ToByteRange">
            <summary>
            转换为ByteRange类型
            </summary>      
            <returns></returns>        
        </member>
        <member name="P:NetworkSocket.ByteBuilder.Length">
            <summary>
            获取数据长度
            </summary>
        </member>
        <member name="P:NetworkSocket.ByteBuilder.Endian">
            <summary>
            获取字节存储次序
            </summary>
        </member>
        <member name="P:NetworkSocket.ByteBuilder.Item(System.Int32)">
            <summary>
            获取或设置指定位置的字节
            </summary>
            <param name="index">索引</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.ByteBuilder.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.ByteBuilder.DebugView.buidler">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteBuilder.DebugView.#ctor(NetworkSocket.ByteBuilder)">
            <summary>
            调试视图
            </summary>
            <param name="buidler">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.ByteBuilder.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.ByteConverter">
            <summary>
            byte类型转换工具类
            提供byte和整型之间的转换
            </summary>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToInt64(System.Byte[],System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由字节数组中指定位置的8个字节转换来的64位有符号整数
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">位置</param>    
            <param name="endian">高低位</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>        
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToUInt64(System.Byte[],System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由字节数组中指定位置的8个字节转换来的64位无符号整数
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">位置</param>    
            <param name="endian">高低位</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>        
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToInt32(System.Byte[],System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的32位有符号整数
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">位置</param>    
            <param name="endian">高低位</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>        
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToUInt32(System.Byte[],System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的32位无符号整数
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">位置</param>    
            <param name="endian">高低位</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>        
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToInt16(System.Byte[],System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的16位有符号整数
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">位置</param>    
            <param name="endian">高低位</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToUInt16(System.Byte[],System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的16位无符号整数
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">位置</param>    
            <param name="endian">高低位</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToBytes(System.Int64,NetworkSocket.Endians)">
            <summary>
            返回由64位有符号整数转换为的字节数组
            </summary>
            <param name="value">整数</param>    
            <param name="endian">高低位</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToBytes(System.UInt64,NetworkSocket.Endians)">
            <summary>
            返回由64位无符号整数转换为的字节数组
            </summary>
            <param name="value">整数</param>    
            <param name="endian">高低位</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToBytes(System.Int32,NetworkSocket.Endians)">
            <summary>
            返回由32位有符号整数转换为的字节数组
            </summary>
            <param name="value">整数</param>    
            <param name="endian">高低位</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToBytes(System.UInt32,NetworkSocket.Endians)">
            <summary>
            返回由32位无符号整数转换为的字节数组
            </summary>
            <param name="value">整数</param>    
            <param name="endian">高低位</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToBytes(System.Int16,NetworkSocket.Endians)">
            <summary>
            返回由16位有符号整数转换为的字节数组
            </summary>
            <param name="value">整数</param>    
            <param name="endian">高低位</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ByteConverter.ToBytes(System.UInt16,NetworkSocket.Endians)">
            <summary>
            返回由16位无符号整数转换为的字节数组
            </summary>
            <param name="value">整数</param>    
            <param name="endian">高低位</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Converter">
            <summary>
            提供类型转换
            </summary>
        </member>
        <member name="F:NetworkSocket.Converter.Instance">
            <summary>
            转换器静态实例
            </summary>
        </member>
        <member name="M:NetworkSocket.Converter.Cast``1(System.Object)">
            <summary>       
            支持基础类型、decimal、guid和枚举相互转换以及这些类型的可空类型和数组类型相互转换
            支持字典和DynamicObject转换为对象以及字典和DynamicObject的数组转换为对象数组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">值</param>      
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.Cast(System.Object,System.Type)">
            <summary>
            支持基础类型、decimal、guid和枚举相互转换以及这些类型的可空类型和数组类型相互转换
            支持字典和DynamicObject转换为对象以及字典和DynamicObject的数组转换为对象数组
            </summary>
            <param name="value">值</param>
            <param name="targetType">目标类型</param>       
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.#ctor">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:NetworkSocket.Converter.Convert``1(System.Object)">
            <summary>
            转换为目标类型
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="value">要转换的值</param>    
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns>转换后的值</returns>
        </member>
        <member name="M:NetworkSocket.Converter.Convert(System.Object,System.Type)">
            <summary>
            转换为目标类型
            </summary>
            <param name="value">要转换的值</param>
            <param name="targetType">要转换的目标类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns>转换后的值</returns>
        </member>
        <member name="P:NetworkSocket.Converter.Items">
            <summary>
            获取转换单元操控对象        
            </summary>
        </member>
        <member name="T:NetworkSocket.Converter.ContertItems">
            <summary>
            表示转换器的转换单元合集
            </summary>
        </member>
        <member name="F:NetworkSocket.Converter.ContertItems.converts">
            <summary>
            转换单元列表
            </summary>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.Insert``1(System.Int32)">
            <summary>
            插入到指定位置
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">索引</param>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.AddFrist``1">
            <summary>
            添加一个转换单元到最前面
            </summary>
            <typeparam name="T">转换单元类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.AddBefore``2">
            <summary>
            添加到指定转换单元之后
            </summary>
            <typeparam name="TSource">要被替换掉的转换单元</typeparam>
            <typeparam name="TDest">替换后的转换单元</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.AddAfter``2">
            <summary>
            添加到指定转换单元之后
            </summary>
            <typeparam name="TSource">要被替换掉的转换单元</typeparam>
            <typeparam name="TDest">替换后的转换单元</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.AddLast``1">
            <summary>
            添加一个转换单元到末尾
            </summary>
            <typeparam name="T">转换单元类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.Remove``1">
            <summary>
            解绑一个转换单元
            </summary>
            <typeparam name="T">转换单元类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.Repace``2">
            <summary>
            替换转换单元
            </summary>
            <typeparam name="TSource">要被替换掉的转换单元</typeparam>
            <typeparam name="TDest">替换后的转换单元</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Converter.ContertItems.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.Converter.ContertItems.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.Converter.ContertItems.DebugView.#ctor(NetworkSocket.Converter.ContertItems)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.Converter.ContertItems.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.Converts.ArrayConvert">
            <summary>
            表示数组转换单元
            </summary>
        </member>
        <member name="T:NetworkSocket.IConvert">
            <summary>
            定义类型转换单元
            </summary>
        </member>
        <member name="M:NetworkSocket.IConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="M:NetworkSocket.Converts.ArrayConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="T:NetworkSocket.Converts.DictionaryConvert">
            <summary>
            表示字典转换单元
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.DictionaryConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="T:NetworkSocket.Converts.DynamicObjectConvert">
            <summary>
            表示动态类型转换单元
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.DynamicObjectConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="M:NetworkSocket.Converts.DynamicObjectConvert.TryGetValue(System.Dynamic.DynamicObject,System.String,System.Object@)">
            <summary>
            获取动态类型的值
            </summary>
            <param name="dynamicObject">实例</param>
            <param name="key">键名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Converts.DynamicObjectConvert.KeyBinder">
            <summary>
            表示键的信息获取绑定
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.DynamicObjectConvert.KeyBinder.#ctor(System.String,System.Boolean)">
            <summary>
            键的信息获取绑定
            </summary>
            <param name="key">键名</param>
            <param name="ignoreCase">是否忽略大小写</param>
        </member>
        <member name="M:NetworkSocket.Converts.DynamicObjectConvert.KeyBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>
            在派生类中重写时，如果无法绑定目标动态对象，则执行动态获取成员操作的绑定
            </summary>
            <param name="target"></param>
            <param name="errorSuggestion"></param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Converts.NoConvert">
            <summary>
            表示不作转换的转换单元
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.NoConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="T:NetworkSocket.Converts.NullableConvert">
            <summary>
            表示可空类型转换单元
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.NullableConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="T:NetworkSocket.Converts.NullConvert">
            <summary>
            表示null值转换单元
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.NullConvert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="T:NetworkSocket.Converts.PrimitiveContert">
            <summary>
            表示简单类型转换单元
            支持基元类型、guid和枚举相互转换
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.PrimitiveContert.Convert(NetworkSocket.Converter,System.Object,System.Type,System.Object@)">
            <summary>
            将value转换为目标类型
            并将转换所得的值放到result
            如果不支持转换，则返回false
            </summary>
            <param name="converter">转换器实例</param>
            <param name="value">要转换的值</param>
            <param name="targetType">转换的目标类型</param>
            <param name="result">转换结果</param>
            <returns>如果不支持转换，则返回false</returns>
        </member>
        <member name="T:NetworkSocket.Converts.PropertySetter">
            <summary>
            表示属性的设置器
            </summary>
        </member>
        <member name="F:NetworkSocket.Converts.PropertySetter.cached">
            <summary>
            类型属性的Setter缓存
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.PropertySetter.GetPropertySetters(System.Type)">
            <summary>
            从类型的属性获取Setter
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="F:NetworkSocket.Converts.PropertySetter.methodInvoker">
            <summary>
            Api行为的方法成员调用委托
            </summary>
        </member>
        <member name="M:NetworkSocket.Converts.PropertySetter.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性的Setter
            </summary>       
            <param name="property">属性</param>        
        </member>
        <member name="M:NetworkSocket.Converts.PropertySetter.SetValue(System.Object,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="instance">实例</param>
            <param name="value">属性的值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Converts.PropertySetter.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Converts.PropertySetter.Name">
            <summary>
            获取属性的名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Converts.PropertySetter.Type">
            <summary>
            获取属性的类型
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IActionContext">
            <summary>
            定义Api执行上下文
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IActionContext.Action">
            <summary>
            获取Api行为对象
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.FilterAttribute">
            <summary>
            表示Api行为过滤器基础特性
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IFilter">
            <summary>
            定义滤过器的接口
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.IFilter.OnExecuting(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.IFilter.OnExecuted(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Core.IFilter.OnException(NetworkSocket.Core.IExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="P:NetworkSocket.Core.IFilter.Order">
            <summary>
            执行顺序
            最小的值优先执行
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IFilter.AllowMultiple">
            <summary>
            获取是否允许多个实例存在
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.FilterAttribute.multiuseAttributeCache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.#ctor">
            <summary>
            表示服务或Api行为过滤器基础特性
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.IsAllowMultiple(System.Type)">
            <summary>
            获取特性是否允许多个实例
            </summary>
            <param name="attributeType">特性类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.NetworkSocket#Core#IFilter#OnExecuting(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.NetworkSocket#Core#IFilter#OnExecuted(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.NetworkSocket#Core#IFilter#OnException(NetworkSocket.Core.IExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.OnExecuting(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.OnExecuted(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Core.FilterAttribute.OnException(NetworkSocket.Core.IExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="P:NetworkSocket.Core.FilterAttribute.Order">
            <summary>
            执行顺序
            最小的值优先执行
            </summary>        
        </member>
        <member name="P:NetworkSocket.Core.FilterAttribute.AllowMultiple">
            <summary>
            获取是否允许多个实例存在
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IDependencyResolverSupportable">
            <summary>
            定义支持依赖注入接口
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IDependencyResolverSupportable.DependencyResolver">
            <summary>
            获取或设置依赖注入提供者
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IExceptionContext">
            <summary>
            定义Api异常上下文
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IExceptionContext.Exception">
            <summary>
            获取异常对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IExceptionContext.ExceptionHandled">
            <summary>
            获取或设置异常是否已处理
            设置为true之后有异常不会抛出
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IFilterSupportable">
            <summary>
            定义支持过滤器的接口
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IFilterSupportable.GlobalFilters">
            <summary>
            获取全局过滤器管理者
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.IFilterSupportable.FilterAttributeProvider">
            <summary>
            获取或设置Api行为特性过滤器提供者
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IGlobalFilters">
            <summary>
            定义全局过滤器管理者
            要求可枚举出过滤器实例
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.IGlobalFilters.Add(NetworkSocket.Core.IFilter)">
            <summary>
            添加过滤器并按Order字段排序
            </summary>
            <param name="filter">过滤器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>      
        </member>
        <member name="M:NetworkSocket.Core.IGlobalFilters.Remove(System.Type)">
            <summary>
            移除某类型的过滤器实例
            </summary>
            <param name="filterType">过滤器的类型</param>
        </member>
        <member name="T:NetworkSocket.Core.ApiActionList">
            <summary>
            表示Api行为列表
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.ApiActionList.dictionary">
            <summary>
            Api行为字典
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.ApiActionList.#ctor">
            <summary>
            Api行为列表
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.ApiActionList.#ctor(System.Collections.Generic.IEnumerable{NetworkSocket.Core.ApiAction})">
            <summary>
            Api行为列表
            </summary>
            <param name="apiActions">Api行为</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Core.ApiActionList.Add(NetworkSocket.Core.ApiAction)">
            <summary>
            添加Api行为
            </summary>
            <param name="apiAction">Api行为</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Core.ApiActionList.AddRange(System.Collections.Generic.IEnumerable{NetworkSocket.Core.ApiAction})">
            <summary>
            添加Api行为
            </summary>
            <param name="apiActions">Api行为</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Core.ApiActionList.TryGet(System.String)">
            <summary>
            获取Api行为
            如果获取不到则返回null
            </summary>
            <param name="name">行为名称</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.ApiActionList.IsExist(System.String)">
            <summary>
            获取是否存在
            </summary>
            <param name="name">行为名称</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Core.LoopWorker">
            <summary>
            由一个线程循环工作的对象
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.LoopWorker.thread">
            <summary>
            工作线程
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.LoopWorker.syncRoot">
            <summary>
            同步对象
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.LoopWorker.workList">
            <summary>
            工作内容队列
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.LoopWorker.#cctor">
            <summary>
            表示构造器
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.LoopWorker.LoopWork">
            <summary>
            循环工作
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.LoopWorker.WorkOnce">
            <summary>
            一轮工作
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.LoopWorker.AddWork(System.Action)">
            <summary>
            添加工作
            </summary>
            <param name="work">工作</param>
        </member>
        <member name="M:NetworkSocket.Core.LoopWorker.RemoveWork(System.Action)">
            <summary>
            删除工作
            </summary>
            <param name="work">工作</param>
        </member>
        <member name="P:NetworkSocket.Core.LoopWorker.Count">
            <summary>
            获取当前的工作数量
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.MethodReflection">
            <summary>
            方法反射调用
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.MethodReflection.CreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            生成方法的委托
            </summary>
            <param name="method">方法成员信息</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Endians">
            <summary>
            表示字节存储次序枚举
            </summary>
        </member>
        <member name="F:NetworkSocket.Endians.Big">
            <summary>
            高位在前
            </summary>
        </member>
        <member name="F:NetworkSocket.Endians.Little">
            <summary>
            低位在前
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.ApiAttribute">
            <summary>
            表示Api标记特性
            提供给远程端来调用
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.ApiAttribute.#ctor">
            <summary>
            Api标记特性
            提供给远程端来调用
            </summary> 
        </member>
        <member name="M:NetworkSocket.Core.ApiAttribute.#ctor(System.String)">
            <summary>
            Api标记特性
            提供给远程端来调用
            </summary>       
            <param name="name">Api名称</param>       
        </member>
        <member name="P:NetworkSocket.Core.ApiAttribute.Name">
            <summary>
            Api名称
            </summary>
        </member>
        <member name="T:NetworkSocket.Exceptions.ProtocolException">
            <summary>
            表示数据包协议异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.ProtocolException.#ctor">
            <summary>
            数据包协议异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.ProtocolException.#ctor(System.String)">
            <summary>
            数据包协议异常
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NetworkSocket.Core.DefaultJsonSerializer">
            <summary>
            默认提供的Json序列化工具
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IJsonDynamicSerializer">
            <summary>
            定义对象的json序列化与json动态反序列化的接口
            异常时抛出SerializerException
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.IJsonDynamicSerializer.Serialize(System.Object)">
            <summary>
            序列化为Json
            异常时抛出SerializerException
            </summary>
            <param name="model">实体</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.IJsonDynamicSerializer.Deserialize(System.String)">
            <summary>
            反序列化json为动态类型
            异常时抛出SerializerException
            </summary>
            <param name="json">json数据</param>      
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.IJsonDynamicSerializer.Convert(System.Object,System.Type)">
            <summary>
            将值转换为目标类型
            这些值有可能是反序列化得到的动态类型的值
            </summary>       
            <param name="value">要转换的值，可能</param>
            <param name="targetType">转换的目标类型</param>   
            <returns>转换结果</returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.Serialize(System.Object)">
            <summary>
            序列化为Json
            </summary>
            <param name="model">实体</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.Deserialize(System.String)">
            <summary>
            反序列化json为动态类型
            异常时抛出SerializerException
            </summary>
            <param name="json">json数据</param>      
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.Convert(System.Object,System.Type)">
            <summary>
            将值转换为目标类型
            这些值有可能是反序列化得到的动态类型的值
            </summary>       
            <param name="value">要转换的值，可能</param>
            <param name="targetType">转换的目标类型</param>   
            <returns>转换结果</returns>
        </member>
        <member name="T:NetworkSocket.Core.DefaultJsonSerializer.JObject">
            <summary>
            表示动态Json对象
            </summary>   
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.Parse(System.String)">
            <summary>
            解析Json
            </summary>
            <param name="json">json</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns></returns>
        </member>
        <member name="F:NetworkSocket.Core.DefaultJsonSerializer.JObject.data">
            <summary>
            数据字典
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            表示动态Json对象
            </summary>
            <param name="data">内容字典</param>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.GetDynamicMemberNames">
            <summary>
            获取成员名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            转换为目标类型
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员的值
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.CastToJObject(System.Object)">
            <summary>
            转换结果为JObject结构或JArray结构
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Core.DefaultJsonSerializer.JObject.DynamicJsonConverter">
            <summary>
            Json转换器
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.DynamicJsonConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            不作序列化
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.DynamicJsonConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Core.DefaultJsonSerializer.JObject.DynamicJsonConverter.SupportedTypes">
            <summary>
            获取支持的类型
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.DefaultJsonSerializer.JObject.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.DefaultJsonSerializer.JObject.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.DefaultJsonSerializer.JObject.DebugView.#ctor(NetworkSocket.Core.DefaultJsonSerializer.JObject)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.Core.DefaultJsonSerializer.JObject.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.FilterAttributeProvider">
            <summary>
            Api行为特性过滤器提供者
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.IFilterAttributeProvider">
            <summary>
            特性过滤器提供者
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.IFilterAttributeProvider.GetActionFilters(NetworkSocket.Core.ApiAction)">
            <summary>
            获取Api行为的过滤器
            不包括全局过滤器
            </summary>
            <param name="apiAction">Api行为</param>
            <returns></returns>
        </member>
        <member name="F:NetworkSocket.Core.FilterAttributeProvider.filterCached">
            <summary>
            服务方法过滤器缓存
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttributeProvider.#ctor">
            <summary>
            Api行为特性过滤器提供者
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttributeProvider.GetActionFilters(NetworkSocket.Core.ApiAction)">
            <summary>
            获取Api行为的特性过滤器     
            </summary>
            <param name="apiAction">Api行为</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.FilterAttributeProvider.GetActionFiltersNoCached(NetworkSocket.Core.ApiAction)">
            <summary>
            获取Api行为的特性过滤器     
            </summary>
            <param name="action">Api行为</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Core.GlobalFiltersBase">
            <summary>
            全局过滤器管理者的基础类
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.GlobalFiltersBase.fiters">
            <summary>
            获取过过滤器过滤器
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.GlobalFiltersBase.Add(NetworkSocket.Core.IFilter)">
            <summary>
            添加过滤器并按Order字段排序
            </summary>
            <param name="filter">过滤器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.GlobalFiltersBase.Remove(System.Type)">
            <summary>
            移除某类型的过滤器实例
            </summary>
            <param name="filterType">过滤器的类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.Core.GlobalFiltersBase.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Core.GlobalFiltersBase.FilterComparer">
            <summary>
            过滤器比较器
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.GlobalFiltersBase.FilterComparer.Compare(NetworkSocket.Core.IFilter,NetworkSocket.Core.IFilter)">
            <summary>
            指示要比较的对象的相对顺序
            值含义小于零x 小于 y。零x 等于 y。大于零x 大于 y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Fast.ActionContext">
            <summary>
            表示Fast协议的Api执行上下文
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.RequestContext">
            <summary>
            表示Fast协议请求上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.RequestContext.#ctor(NetworkSocket.Fast.FastSession,NetworkSocket.Fast.FastPacket,System.Collections.Generic.IEnumerable{NetworkSocket.Fast.FastSession})">
            <summary>
            请求上下文
            </summary>
            <param name="session">当前会话对象</param>
            <param name="packet">数据包对象</param>
            <param name="allSessions">所有会话对象</param>
        </member>
        <member name="M:NetworkSocket.Fast.RequestContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.RequestContext.Session">
            <summary>
            获取当前会话对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.RequestContext.Packet">
            <summary>
            获取数据包对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.RequestContext.AllSessions">
            <summary>
            获取所有会话对象
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.ActionContext.#ctor(NetworkSocket.Fast.RequestContext,NetworkSocket.Core.ApiAction)">
            <summary>
            Api行为上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="action">Api行为</param>
        </member>
        <member name="M:NetworkSocket.Fast.ActionContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.ActionContext.Action">
            <summary>
            获取Api行为对象
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.ExceptionContext">
            <summary>
            表示Fast协议Api异常上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.ExceptionContext.#ctor(NetworkSocket.Fast.ActionContext,System.Exception)">
            <summary>
            异常上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.Fast.ExceptionContext.#ctor(NetworkSocket.Fast.RequestContext,System.Exception)">
            <summary>
            异常上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.Fast.ExceptionContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.ExceptionContext.Exception">
            <summary>
            获取异常对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.ExceptionContext.ExceptionHandled">
            <summary>
            获取或设置异常是否已处理
            设置为true之后有异常不会抛出
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastApiService">
            <summary>
            Fast协议的Api服务基类
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastFilterAttribute">
            <summary>
            表示Fast协议过滤器
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastFilterAttribute.OnExecuting(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastFilterAttribute.OnExecuted(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Fast.FastFilterAttribute.OnException(NetworkSocket.Core.IExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastFilterAttribute.OnExecuting(NetworkSocket.Fast.ActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastFilterAttribute.OnExecuted(NetworkSocket.Fast.ActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Fast.FastFilterAttribute.OnException(NetworkSocket.Fast.ExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="T:NetworkSocket.Fast.IFastApiService">
            <summary>
            定义Fast协议的Api服务
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.IFastApiService.Execute(NetworkSocket.Fast.ActionContext)">
            <summary>
            执行Api行为
            </summary>              
            <param name="actionContext">Api行为上下文</param>      
        </member>
        <member name="F:NetworkSocket.Fast.FastApiService.currentContext">
            <summary>
            线程唯一上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.NetworkSocket#Fast#IFastApiService#Execute(NetworkSocket.Fast.ActionContext)">
            <summary>
            执行Api行为
            </summary>   
            <param name="actionContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.ProcessExecutingException(NetworkSocket.Fast.ActionContext,System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},System.Exception)">
            <summary>
            处理Api行为执行过程中产生的异常
            </summary>
            <param name="actionContext">上下文</param>
            <param name="actionfilters">过滤器</param>
            <param name="exception">异常项</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.ExecuteAction(NetworkSocket.Fast.ActionContext,System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter})">
            <summary>
            调用自身实现的Api行为
            将返回值发送给客户端        
            </summary>       
            <param name="actionContext">上下文</param>       
            <param name="filters">过滤器</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.ExecFiltersBeforeAction(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.Fast.ActionContext)">
            <summary>
            在Api行为前 执行过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="actionContext">上下文</param>   
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.ExecFiltersAfterAction(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.Fast.ActionContext)">
            <summary>
            在Api行为后执行过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="actionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.ExecExceptionFilters(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.Fast.ExceptionContext)">
            <summary>
            执行异常过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="exceptionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.Dispose">
            <summary>
            关闭和释放所有相关资源
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastApiService.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.Fast.FastApiService.CurrentContext">
            <summary>
            获取当前Api行为上下文
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastApiService.Server">
            <summary>
            获取关联的服务器实例
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastApiService.IsDisposed">
            <summary>
            获取对象是否已释放
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastPacket">
            <summary>
            通讯协议的封包
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.#ctor(System.String,System.Int64,System.Boolean)">
            <summary>
            通讯协议的封包
            </summary>
            <param name="api">api名称</param>
            <param name="id">标识符</param>
            <param name="fromClient">是否为客户端的封包</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.SetBodyParameters(NetworkSocket.Core.ISerializer,System.Object[])">
            <summary>
            将参数序列化并写入为Body
            </summary>
            <param name="serializer">序列化工具</param>
            <param name="parameters">参数</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.GetBodyParameters(NetworkSocket.Core.ISerializer,System.Type[])">
            <summary>
            获取Body的参数值
            </summary>
            <param name="serializer">序列化工具</param>
            <param name="parameterTypes">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.GetBodyParameters">
            <summary>
            将Body的数据解析为参数
            </summary>        
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.ToByteRange">
            <summary>
            转换为ByteRange
            </summary>
            <exception cref="T:NetworkSocket.Exceptions.ProtocolException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.From(NetworkSocket.ReceiveStream)">
            <summary>
            解析一个数据包       
            不足一个封包时返回null
            </summary>
            <param name="buffer">接收到的历史数据</param>
            <exception cref="T:NetworkSocket.Exceptions.ProtocolException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.TotalBytes">
            <summary>
            获取封包的字节长度
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.ApiNameLength">
            <summary>
            获取api名称长度
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.ApiName">
            <summary>
            获取api名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.Id">
            <summary>
            获取封包的唯一标识
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.IsFromClient">
            <summary>
            获取是否为客户端的封包
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.IsException">
            <summary>
            获取或设置是否异常数据
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.Body">
            <summary>
            获取或设置数据体的数据
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastSession">
            <summary>
            Fast会话对象
            不可继承
            </summary>
        </member>
        <member name="T:NetworkSocket.SessionBase">
            <summary>
            会话对象基础类  
            所有会话对象和客户端都派生于此类
            </summary>        
        </member>
        <member name="T:NetworkSocket.ISession">
            <summary>
            定义会话接口
            </summary>   
        </member>
        <member name="M:NetworkSocket.ISession.Send(NetworkSocket.ByteRange)">
            <summary>
            异步发送数据
            </summary>
            <param name="byteRange">数据范围</param>  
        </member>
        <member name="M:NetworkSocket.ISession.Close">
            <summary>      
            断开和远程端的连接
            </summary>
        </member>
        <member name="P:NetworkSocket.ISession.TagData">
            <summary>
            获取用户数据字典
            </summary>
        </member>
        <member name="P:NetworkSocket.ISession.TagBag">
            <summary>
            获取用户数据字典
            </summary>
        </member>
        <member name="P:NetworkSocket.ISession.RemoteEndPoint">
            <summary>
            获取远程终结点
            </summary>
        </member>
        <member name="P:NetworkSocket.ISession.IsConnected">
            <summary>
            获取是否已连接到远程端
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.socket">
            <summary>
            socket
            </summary>        
        </member>
        <member name="F:NetworkSocket.SessionBase.socketRoot">
            <summary>
            socket同步锁
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.socketClosed">
            <summary>
            是否已关闭
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.pendingSendCount">
            <summary>
            等待发送的数量
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.sendArg">
            <summary>
            用于发送的SocketAsyncEventArgs
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.byteRangeQueue">
            <summary>
            待发送的ByeRange集合
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.recvArg">
            <summary>
            用于接收的SocketAsyncEventArgs
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.recvStream">
            <summary>
            接收到的未处理数据
            </summary>      
        </member>
        <member name="F:NetworkSocket.SessionBase.ReceiveHandler">
            <summary>
            处理和分析收到的数据的委托
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.DisconnectHandler">
            <summary>
            连接断开委托   
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionBase.CloseHandler">
            <summary>
            关闭时的委托
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionBase.#ctor">
            <summary>
            表示会话对象
            </summary>  
            <exception cref="T:System.OutOfMemoryException"></exception>
        </member>
        <member name="M:NetworkSocket.SessionBase.Bind(System.Net.Sockets.Socket)">
            <summary>
            绑定一个Socket对象
            </summary>
            <param name="socket">套接字</param>
        </member>
        <member name="M:NetworkSocket.SessionBase.TrySetKeepAlive(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            设置客户端的心跳包
            </summary>
            <param name="socket">客户端</param>
            <param name="dueTime">延迟的时间量（以毫秒为单位）</param>
            <param name="period">时间间隔（以毫秒为单位）</param>
        </member>
        <member name="M:NetworkSocket.SessionBase.TryInvoke(System.Action)">
            <summary>
            尝试执行方法
            </summary>
            <param name="action">方法</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionBase.TryReceiveAsync">
            <summary>
            尝试开始接收数据
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionBase.RecvCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接收到数据事件
            </summary>
            <param name="sender">事件源</param>
            <param name="arg">参数</param>
        </member>
        <member name="M:NetworkSocket.SessionBase.Send(NetworkSocket.ByteRange)">
            <summary>
            异步发送数据
            </summary>
            <param name="byteRange">数据范围</param>  
            <exception cref="T:System.ArgumentNullException"></exception>        
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:NetworkSocket.SessionBase.SendByteRange(NetworkSocket.ByteRange)">
            <summary>
            发送一个小于缓冲区的数据范围
            </summary>
            <param name="byteRange">数据范围</param>
        </member>
        <member name="M:NetworkSocket.SessionBase.TrySendByteRangeAsync(NetworkSocket.ByteRange)">
            <summary>
            尝试异步发送一个ByteRange
            发送完成将触发SendCompleted方法
            <param name="byteRange">数据范围，为null则从缓冲中区获取</param>
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionBase.SendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            发送完成时触发
            将检测是否有缓存的数据要继续发送
            </summary>
            <param name="sender">发送者</param>
            <param name="arg">关联的SocketAsyncEventArgs</param>
        </member>
        <member name="M:NetworkSocket.SessionBase.Close">
            <summary>     
            等待缓冲区数据发送完成
            然后断开和远程端的连接   
            </summary>     
        </member>
        <member name="M:NetworkSocket.SessionBase.Close(System.Boolean)">
            <summary>
            断开和远程端的连接           
            </summary>
            <param name="waitForSendComplete">是否等待缓冲区数据发送完成再关闭</param>       
        </member>
        <member name="M:NetworkSocket.SessionBase.CloseInternal(System.Boolean)">
            <summary>
            主动断开和远程端的连接  
            </summary>
            <param name="waitForSendComplete">是否等待数据发送完成</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionBase.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionBase.System#IDisposable#Dispose">
            <summary>
            关闭和释放所有相关资源
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionBase.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.SessionBase.RemoteEndPoint">
            <summary>
            获取远程终结点
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionBase.TagBag">
            <summary>
            获取用户附加数据
            与TagData共享
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionBase.TagData">
            <summary>
            获取用户附加数据
            与TagBag共享
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionBase.ExtraState">
            <summary>
            获取有外的状态信息
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionBase.IsConnected">
            <summary>
            获取是否已连接到远程端
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionBase.IsDisposed">
            <summary>
            获取是否已释放
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.IFastSession">
            <summary>
            Fast会话接口
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.IFastSession.InvokeApi(System.String,System.Object[])">
            <summary>
            调用远程端实现的Api        
            </summary>        
            <param name="api">数据包Api名</param>
            <param name="parameters">参数列表</param> 
        </member>
        <member name="M:NetworkSocket.Fast.IFastSession.InvokeApi``1(System.String,System.Object[])">
            <summary>
            调用远程端实现的Api      
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>        
            <param name="api">数据包Api名</param>
            <param name="parameters">参数</param>        
            <returns>远程数据任务</returns>         
        </member>
        <member name="M:NetworkSocket.Fast.FastSession.#ctor(NetworkSocket.Fast.FastTcpServer)">
            <summary>
            服务器的客户端对象
            </summary>
            <param name="server">服务器实例</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastSession.InvokeApi(System.String,System.Object[])">
            <summary>
            调用远程端实现的Api        
            </summary>        
            <param name="api">数据包Api名</param>
            <param name="parameters">参数列表</param>      
            <exception cref="T:System.Net.Sockets.SocketException"></exception>     
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>   
            <exception cref="T:NetworkSocket.Exceptions.ProtocolException"></exception>
        </member>
        <member name="M:NetworkSocket.Fast.FastSession.InvokeApi``1(System.String,System.Object[])">
            <summary>
            调用远程端实现的Api      
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>        
            <param name="api">数据包Api名</param>
            <param name="parameters">参数</param>       
            <exception cref="T:System.Net.Sockets.SocketException"></exception>      
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <exception cref="T:NetworkSocket.Exceptions.ProtocolException"></exception>
            <returns>远程数据任务</returns>         
        </member>
        <member name="P:NetworkSocket.Fast.FastSession.Server">
            <summary>
            获取服务器实例
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastTcpClient">
            <summary>
            快速构建Tcp客户端
            </summary>
        </member>
        <member name="T:NetworkSocket.TcpClientBase">
            <summary>
            Tcp客户端抽象类
            所有Tcp客户端都派生于此类
            </summary>   
        </member>
        <member name="T:NetworkSocket.ITcpClient">
            <summary>
            Tcp客户端接口
            </summary>    
        </member>
        <member name="M:NetworkSocket.ITcpClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            连接到远程终端       
            </summary>
            <param name="ip">远程ip</param>
            <param name="port">远程端口</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ITcpClient.Connect(System.Net.IPEndPoint)">
            <summary>
            连接到远程终端 
            </summary>
            <param name="remoteEndPoint">远程ip和端口</param> 
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.#ctor">
            <summary>
            Tcp客户端抽象类
            </summary>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.Connect(System.String,System.Int32)">
            <summary>
            连接到远程端
            </summary>
            <param name="hostNameOrAddress">域名或ip地址</param>
            <param name="port">远程端口</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            连接到远程终端       
            </summary>
            <param name="ip">远程ip</param>
            <param name="port">远程端口</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.Connect(System.Net.IPEndPoint)">
            <summary>
            连接到远程终端 
            </summary>
            <param name="remoteEndPoint">远程ip和端口</param> 
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.ConnectCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接完成事件
            </summary>
            <param name="sender">连接者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.ReConnect">
            <summary>
            连接到最近一次连接的远程端口
            如果IsConnected为true，则返回TaskOf(false)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.OnReceive(NetworkSocket.ReceiveStream)">
            <summary>
            当接收到远程端的数据时，将触发此方法   
            </summary>       
            <param name="buffer">接收到的历史数据</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.OnDisconnectInternal">
            <summary>
            关闭连接并触发关闭事件
            </summary>
        </member>
        <member name="M:NetworkSocket.TcpClientBase.OnDisconnect">
            <summary>
            当与服务器断开连接时，将触发此方法
            </summary>       
        </member>
        <member name="T:NetworkSocket.Fast.IFastTcpClient">
            <summary>
            快速构建Tcp客户端接口
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.IFastTcpClient.Serializer">
            <summary>
            获取或设置序列化工具      
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.FastTcpClient.apiActionList">
            <summary>
            所有Api行为
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.FastTcpClient.packetIdProvider">
            <summary>
            数据包id提供者
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.FastTcpClient.taskSetActionTable">
            <summary>
            任务行为表
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.#ctor">
            <summary>
            快速构建Tcp服务端
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.OnReceive(NetworkSocket.ReceiveStream)">
            <summary>
            当接收到远程端的数据时，将触发此方法
            </summary>
            <param name="buffer">接收到的历史数据</param>        
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.OnRecvPacket(NetworkSocket.Fast.FastPacket)">
            <summary>
            接收到服务发来的数据包
            </summary>
            <param name="packet">数据包</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.ProcessRemoteException(NetworkSocket.Fast.RequestContext)">
            <summary>
            处理远返回的程异常
            </summary>
            <param name="requestContext">请求上下文</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.ProcessRequest(NetworkSocket.Fast.RequestContext)">
            <summary>
            处理正常的数据请求
            </summary>      
            <param name="requestContext">请求上下文</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.GetApiAction(NetworkSocket.Fast.RequestContext)">
            <summary>
            获取Api行为
            </summary>
            <param name="requestContext">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.TryExecuteAction(NetworkSocket.Fast.ActionContext)">
            <summary>
            调用自身方法
            将返回值发送给服务器
            或将异常发送给服务器
            </summary>    
            <param name="actionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.ExecuteAction(NetworkSocket.Fast.ActionContext)">
            <summary>
            执行Api行为
            </summary>
            <param name="actionContext">上下文</param>   
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.ProcessExecutingException(NetworkSocket.Fast.ActionContext,System.Exception)">
            <summary>
            处理Api行为执行过程中产生的异常
            </summary>
            <param name="actionContext">上下文</param>       
            <param name="exception">异常项</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.OnException(NetworkSocket.Fast.FastPacket,System.Exception,System.Boolean@)">
            <summary>
             当操作中遇到处理异常时，将触发此方法
            </summary>
            <param name="packet">数据包对象</param>
            <param name="exception">异常对象</param>
            <param name="exceptionHandled">异常是否已处理</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.InvokeApi(System.String,System.Object[])">
            <summary>
            调用服务端实现的Api        
            </summary>       
            <param name="api">Api行为的api</param>
            <param name="parameters">参数列表</param>          
            <exception cref="T:System.Net.Sockets.SocketException"></exception> 
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception> 
            <exception cref="T:NetworkSocket.Exceptions.ProtocolException"></exception>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.InvokeApi``1(System.String,System.Object[])">
            <summary>
            调用服务端实现的Api   
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="api">Api行为的api</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>        
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <exception cref="T:NetworkSocket.Exceptions.ProtocolException"></exception>
            <returns>远程数据任务</returns>    
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.OnDisconnect">
            <summary>
            当与服务器断开连接时，将触发此方法
            并触发未完成的请求产生SocketException异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClient.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpClient.TimeOut">
            <summary>
            获取或设置请求等待超时时间(毫秒) 
            默认30秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpClient.Serializer">
            <summary>
            获取或设置序列化工具
            默认是Json序列化
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastTcpServer">
            <summary>
            快速构建Tcp服务端
            </summary>
        </member>
        <member name="T:NetworkSocket.TcpServerBase`1">
            <summary>
            Tcp服务端抽象类
            提供对客户端池的初始化、自动回收重用、在线客户端列表维护功能
            提供客户端连接、断开通知功能
            所有Tcp服务端都派生于此类
            </summary>
            <typeparam name="T">会话类型</typeparam>   
        </member>
        <member name="T:NetworkSocket.ITcpServer`1">
            <summary>
            Tcp服务接口
            </summary>    
            <typeparam name="T">会话类型</typeparam>
        </member>
        <member name="M:NetworkSocket.ITcpServer`1.StartListen(System.Int32)">
            <summary>
            开始启动监听       
            </summary>
            <param name="port">端口</param>
        </member>
        <member name="M:NetworkSocket.ITcpServer`1.StartListen(System.Net.IPEndPoint)">
            <summary>
            开始启动监听
            </summary>
            <param name="localEndPoint">要监听的本地IP和端口</param>
        </member>
        <member name="P:NetworkSocket.ITcpServer`1.AllSessions">
            <summary>
            获取当前所有会话对象   
            </summary>
        </member>
        <member name="F:NetworkSocket.TcpServerBase`1.totalSessionCount">
            <summary>
            所有会话的数量
            </summary>
        </member>
        <member name="F:NetworkSocket.TcpServerBase`1.acceptFailureTimes">
            <summary>
            接受会话失败的次数
            </summary>
        </member>
        <member name="F:NetworkSocket.TcpServerBase`1.listenSocket">
            <summary>
            服务socket
            </summary>
        </member>
        <member name="F:NetworkSocket.TcpServerBase`1.acceptArg">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="F:NetworkSocket.TcpServerBase`1.freeSessionQueue">
            <summary>
            空闲客户端池
            </summary>        
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.#ctor">
            <summary>
            Tcp服务端抽象类
            </summary> 
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.StartListen(System.Int32)">
            <summary>
            开始启动监听
            如果IsListening为true，将不产生任何作用
            </summary>
            <param name="port">端口</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.StartListen(System.Net.IPEndPoint)">
            <summary>
            开始启动监听
            如果IsListening为true，将不产生任何作用
            </summary>
            <param name="localEndPoint">要监听的本地IP和端口</param>    
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.AcceptSession(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            开始一次接受连接请求操作
            </summary>
            <param name="arg">连接参数</param>     
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.AcceptArgCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接请求IO完成
            </summary>
            <param name="arg">连接参数</param>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.TakeOrCreateSession">
            <summary>
            从空闲池中取出或创建Session会话对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.InitSession(`0,System.Net.Sockets.Socket)">
            <summary>
            初始化Session会话
            </summary>
            <param name="session">会话</param>
            <param name="socket">要绑定的socket</param>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.RecyceSession(`0)">
            <summary>
            回收复用会话对象
            关闭会话并通知连接断开
            </summary>
            <param name="session">会话对象</param>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.OnCreateSession">
            <summary>
            创建新的会话对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.OnException(System.Object,System.Exception)">
            <summary>
            创建会话或解析请求数据产生异常触发
            </summary>
            <param name="sender">异常产生者</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.OnReceive(`0,NetworkSocket.ReceiveStream)">
            <summary>
            当接收到会话对象的数据时，将触发此方法             
            </summary>
            <param name="session">会话对象</param>
            <param name="buffer">接收到的历史数据</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.OnDisconnect(`0)">
            <summary>
            当会话断开连接时，将触发此方法
            </summary>
            <param name="session">会话对象</param>     
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.OnConnect(`0)">
            <summary>
            当会话连接时，将触发此方法
            </summary>
            <param name="session">会话对象</param>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.Dispose">
            <summary>
            关闭和释放所有相关资源
            </summary>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NetworkSocket.TcpServerBase`1.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.TcpServerBase`1.AllSessions">
            <summary>
            获取当前所有会话对象   
            </summary>
        </member>
        <member name="P:NetworkSocket.TcpServerBase`1.LocalEndPoint">
            <summary>
            获取所监听的本地IP和端口
            </summary>
        </member>
        <member name="P:NetworkSocket.TcpServerBase`1.IsListening">
            <summary>
            获取服务是否已处在监听中
            </summary>
        </member>
        <member name="P:NetworkSocket.TcpServerBase`1.ExtraState">
            <summary>
            获取额外信息
            </summary>
        </member>
        <member name="P:NetworkSocket.TcpServerBase`1.IsDisposed">
            <summary>
            获取对象是否已释放
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.IFastTcpServer">
            <summary>
            快速构建Tcp服务端接口
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.IFastTcpServer.Serializer">
            <summary>
            获取或设置序列化工具       
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.FastTcpServer.apiActionList">
            <summary>
            所有Api行为
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.#ctor">
            <summary>
            快速构建Tcp服务端
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.BindService(System.Reflection.Assembly)">
            <summary>
            绑定程序集下所有实现IFastApiService的服务
            </summary>
            <param name="assembly">程序集</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.BindService``1">
            <summary>
            绑定服务
            </summary>
            <typeparam name="T">服务类型</typeparam>        
            <exception cref="T:System.ArgumentException"></exception>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.BindService(System.Type[])">
            <summary>
            绑定服务
            </summary>
            <param name="apiServiceType">Api服务类型</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.BindService(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            绑定服务
            </summary>
            <param name="apiServiceType">Api服务类型</param>        
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.OnCreateSession">
            <summary>
            创建新的会话对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.OnReceive(NetworkSocket.Fast.FastSession,NetworkSocket.ReceiveStream)">
            <summary>
            当接收到会话对象的数据时，将触发此方法  
            </summary>
            <param name="session">会话对象</param>
            <param name="buffer">接收到的历史数据</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.OnRecvPacket(NetworkSocket.Fast.FastSession,NetworkSocket.Fast.FastPacket)">
            <summary>
            接收到会话对象的数据包
            </summary>
            <param name="session">会话对象</param>
            <param name="packet">数据包</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.ProcessRemoteException(NetworkSocket.Fast.RequestContext)">
            <summary>
            处理远返回的程异常
            </summary>
            <param name="requestContext">请求上下文</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.ProcessRequest(NetworkSocket.Fast.RequestContext)">
            <summary>
            处理正常的数据请求
            </summary>
            <param name="requestContext">请求上下文</param>       
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.GetApiAction(NetworkSocket.Fast.RequestContext)">
            <summary>
            获取Api行为
            </summary>
            <param name="requestContext">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.GetFastApiService(NetworkSocket.Fast.ActionContext)">
            <summary>
            获取FastApiService实例
            </summary>
            <param name="actionContext">Api行为上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.ExecGlobalExceptionFilters(NetworkSocket.Fast.ExceptionContext)">
            <summary>
            执行异常过滤器
            </summary>         
            <param name="exceptionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServer.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.PacketIdProvider">
            <summary>
            获取数据包id提供者
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.TaskSetActionTable">
            <summary>
            获取任务行为记录表
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.TimeOut">
            <summary>
            获取或设置请求等待超时时间(毫秒)    
            默认30秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.Serializer">
            <summary>
            获取或设置序列化工具
            默认是Json序列化
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.GlobalFilters">
            <summary>
            获取全局过滤器
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.DependencyResolver">
            <summary>
            获取或设置依赖关系解析提供者
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServer.FilterAttributeProvider">
            <summary>
            获取或设置Api行为特性过滤器提供者
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.Common">
            <summary>
            FastTcp公共类
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.Common.GetServiceApiActions(System.Type)">
            <summary>
            获取服务类型的Api行为
            </summary>
            <param name="seviceType">服务类型</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Common.SetApiActionTaskResult(NetworkSocket.Fast.RequestContext,NetworkSocket.Fast.TaskSetActionTable)">
            <summary>
            设置Api行为返回的任务结果
            </summary>
            <param name="requestContext">上下文</param>
            <param name="taskSetActionTable">任务行为表</param>
        </member>
        <member name="M:NetworkSocket.Fast.Common.SetApiActionTaskException(NetworkSocket.Fast.TaskSetActionTable,NetworkSocket.Fast.RequestContext)">
            <summary>
            设置Api行为返回的任务异常 
            设置失败则返远程异常对象
            </summary>
            <param name="taskSetActionTable">任务行为表</param>
            <param name="requestContext">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Common.SetRemoteException(NetworkSocket.ISession,NetworkSocket.Fast.ExceptionContext)">
            <summary>       
            设置远程异常
            </summary>
            <param name="session">会话对象</param>       
            <param name="exceptionContext">上下文</param>  
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Common.InvokeApi``1(NetworkSocket.ISession,NetworkSocket.Fast.TaskSetActionTable,NetworkSocket.Core.ISerializer,NetworkSocket.Fast.FastPacket)">
            <summary>
            调用远程端的Api     
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="session">会话对象</param>
            <param name="taskSetActionTable">任务行为表</param>
            <param name="serializer">序列化工具</param>      
            <param name="packet">封包</param>      
            <exception cref="T:System.Net.Sockets.SocketException"></exception>   
        </member>
        <member name="T:NetworkSocket.Fast.GlobalFilters">
            <summary>
            Fast协议的全局过滤器提供者
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.GlobalFilters.Add(NetworkSocket.Core.IFilter)">
            <summary>
            添加过滤器
            </summary>
            <param name="filter"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:NetworkSocket.Fast.PacketIdProvider">
            <summary>
            数据包id提供者
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.PacketIdProvider.id">
            <summary>
            基准值
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.PacketIdProvider.NewId">
            <summary>
            获取标识符
            每获取一次自增1
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Fast.SetTypes">
            <summary>
            任务设置行为
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.SetTypes.SetReturnReult">
            <summary>
            设置远程返回结果
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.SetTypes.SetReturnException">
            <summary>
            设置远程返回的异常
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.SetTypes.SetTimeoutException">
            <summary>
            设置超时引起异常
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.SetTypes.SetShutdownException">
            <summary>
            设置远程端关闭连接异常
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.ITaskSetAction">
            <summary>
            任务设置行为接口
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.ITaskSetAction.SetAction(NetworkSocket.Fast.SetTypes,System.Byte[])">
            <summary>
            设置行为
            </summary>
            <param name="setType">行为类型</param>
            <param name="bytes">数据值</param>
        </member>
        <member name="P:NetworkSocket.Fast.ITaskSetAction.CreateTime">
            <summary>
            获取创建时间
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.TaskSetAction`1">
            <summary>
            任务设置行为信息
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.TaskSetAction`1.serializer">
            <summary>
            序列化工具
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.TaskSetAction`1.taskSource">
            <summary>
            任务源
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetAction`1.#ctor(NetworkSocket.Core.ISerializer,System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            任务设置行为
            </summary>       
            <param name="serializer">序列化工具</param>
            <param name="taskSource">任务源</param>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetAction`1.SetAction(NetworkSocket.Fast.SetTypes,System.Byte[])">
            <summary>
            设置行为
            </summary>
            <param name="setType">行为类型</param>
            <param name="bytes">数据值</param>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetAction`1.SetResult(System.Byte[])">
            <summary>
            设置结果
            </summary>
            <param name="bytes">数据</param>
        </member>
        <member name="P:NetworkSocket.Fast.TaskSetAction`1.CreateTime">
            <summary>
            获取创建时间
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.TaskSetActionTable">
            <summary>
            任务行为表
            自带超时检测功能
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.TaskSetActionTable.timeOut">
            <summary>
            超时时间
            </summary>       
        </member>
        <member name="F:NetworkSocket.Fast.TaskSetActionTable.table">
            <summary>
            任务行为字典
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.#ctor">
            <summary>
            任务行为表
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.CheckTaskActionTimeout">
            <summary>
            检测任务行为的超时
            </summary>       
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.ProcessIfTimeout(System.Int64)">
            <summary>
            如果超时了就处理超时并返回true
            否则返回false
            </summary>
            <param name="key">值</param>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.Add(System.Int64,NetworkSocket.Fast.ITaskSetAction)">
            <summary>
            添加回调信息记录       
            </summary>
            <param name="key">键值</param>
            <param name="taskSetAction">设置行为</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.Take(System.Int64)">
            <summary>      
            获取并移除与key匹配值
            如果没有匹配项，返回null
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.TakeAll">
            <summary>
            取出并移除全部的项
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.TaskSetActionTable.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.TaskSetActionTable.TimeOut">
            <summary>
            获取或设置超时时间(毫秒)
            默认30秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:NetworkSocket.Http.HttpFilterAttribute">
            <summary>
            表示http协议过滤器
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpFilterAttribute.OnExecuting(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpFilterAttribute.OnExecuted(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Http.HttpFilterAttribute.OnException(NetworkSocket.Core.IExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpFilterAttribute.OnExecuting(NetworkSocket.Http.ActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpFilterAttribute.OnExecuted(NetworkSocket.Http.ActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Http.HttpFilterAttribute.OnException(NetworkSocket.Http.ExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="T:NetworkSocket.Exceptions.HttpException">
            <summary>
            表示http异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.HttpException.#ctor(System.Int32,System.String)">
            <summary>
            http异常
            </summary>
            <param name="status">状态码</param>
            <param name="message">提示消息</param>
        </member>
        <member name="P:NetworkSocket.Exceptions.HttpException.Status">
            <summary>
            获取状态码
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpFile">
            <summary>
            表示http文件
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpFile.#ctor(NetworkSocket.Http.MultipartHead,System.Byte[])">
            <summary>
            http文件
            </summary>
            <param name="head">头内容</param>
            <param name="stream">数据流</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpFile.SaveAs(System.String)">
            <summary>
            保存到本地文件
            </summary>
            <param name="path">文件路径</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpFile.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.HttpFile.Name">
            <summary>
            获取名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpFile.FileName">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpFile.Stream">
            <summary>
            获取文件数据
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpMIME">
            <summary>
            表示文件扩展类型
            </summary>    
        </member>
        <member name="M:NetworkSocket.Http.HttpMIME.#ctor(System.String,System.String)">
            <summary>
            文件扩展类型
            </summary>
            <param name="extension">扩展名</param>
            <param name="contentType">类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIME.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.HttpMIME.Extension">
            <summary>
            获取扩展名
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpMIME.ContentType">
            <summary>
            获取类型
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpMIMECollection">
            <summary>
            表示文件扩展类型集合
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpMIMECollection.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpMIMECollection.mimes">
            <summary>
            保存MIME的字典
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.FillBasicMIME">
            <summary>
            填充一些常用的扩展类型
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.Add(NetworkSocket.Http.HttpMIME)">
            <summary>
            添加扩展类型
            </summary>
            <param name="item">扩展类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.Add(System.String,System.String)">
            <summary>
            添加扩展类型
            </summary>
            <param name="extension">扩展名</param>
            <param name="contentType">内容类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.System#Collections#Generic#ICollection{NetworkSocket#Http#HttpMIME}#Remove(NetworkSocket.Http.HttpMIME)">
            <summary>
            删除
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.Clear">
            <summary>
            清除集合
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.GetContentType(System.String)">
            <summary>
            获取扩展的类型
            </summary>
            <param name="extension">扩展名</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.System#Collections#Generic#ICollection{NetworkSocket#Http#HttpMIME}#Contains(NetworkSocket.Http.HttpMIME)">
            <summary>
            是否包含
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.System#Collections#Generic#ICollection{NetworkSocket#Http#HttpMIME}#CopyTo(NetworkSocket.Http.HttpMIME[],System.Int32)">
            <summary>
            控制到数组
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.HttpMIMECollection.Count">
            <summary>
            获取元素数量
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpMIMECollection.System#Collections#Generic#ICollection{NetworkSocket#Http#HttpMIME}#IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpMIMECollection.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpMIMECollection.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpMIMECollection.DebugView.#ctor(NetworkSocket.Http.HttpMIMECollection)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.Http.HttpMIMECollection.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpPostAttribute">
            <summary>
            表示只允许Post请求或优先Post请求到的http方法
            不可继承
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.GlobalFilters">
            <summary>
            Http协议的全局过滤器提供者
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.GlobalFilters.Add(NetworkSocket.Core.IFilter)">
            <summary>
            添加过滤器
            </summary>
            <param name="filter"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:NetworkSocket.Http.MultipartHead">
            <summary>
            表单头
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.MultipartHead.head">
            <summary>
            头数据
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.MultipartHead.#ctor(System.String)">
            <summary>
            表单头
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:NetworkSocket.Http.MultipartHead.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.MultipartHead.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.MultipartHead.Name">
            <summary>
            获取名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.MultipartHead.FileName">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.MultipartHead.IsFile">
            <summary>
            获取是否为文件
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.EmptyResult">
            <summary>
            表示空内容的结果
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.ContentResult">
            <summary>
            表示text/html内容
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.ActionResult">
            <summary>
            表示行为结果
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.ActionResult.ExecuteResult(NetworkSocket.Http.RequestContext)">
            <summary>
            执行结果
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.ContentResult.#ctor(System.String)">
            <summary>
            text/html内容
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:NetworkSocket.Http.ContentResult.ExecuteResult(NetworkSocket.Http.RequestContext)">
            <summary>
            执行结果
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.EmptyResult.#ctor">
            <summary>
            空内容的结果
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.ErrorResult">
            <summary>
            表示异常结果
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.ErrorResult.ExecuteResult(NetworkSocket.Http.RequestContext)">
            <summary>
            执行结果
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="P:NetworkSocket.Http.ErrorResult.Status">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.ErrorResult.Errors">
            <summary>
            错误内容
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.FileResult">
            <summary>
            表示文件结果
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.FileResult.ExecuteResult(NetworkSocket.Http.RequestContext)">
            <summary>
            执行结果
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.FileResult.ExecuteFileResult(NetworkSocket.Http.RequestContext)">
            <summary>
            输出文件
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="P:NetworkSocket.Http.FileResult.FileName">
            <summary>
            获取或设置文件路径
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.FileResult.ContentType">
            <summary>
            获取或设置内容类型
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.FileResult.ContentDisposition">
            <summary>
            获取或设置内容描述
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.RouteAttribute">
            <summary>
            表示路由规则
            不可继承
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.RouteAttribute.#ctor(System.String)">
            <summary>
            表示路由规则
            以/开始
            </summary>
            <param name="route">路由规则</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:NetworkSocket.Http.RouteAttribute.Route">
            <summary>
            获取路由规则
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpAction">
            <summary>
            Http行为    
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.ApiAction">
            <summary>
            表示Api行为    
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.ApiAction.method">
            <summary>
            Api行为的方法成员信息
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.ApiAction.methodInvoker">
            <summary>
            Api行为的方法成员调用委托
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.ApiAction.parameters">
            <summary>
            参数值
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.ApiAction.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Api行为
            </summary>
            <param name="method">方法信息</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Core.ApiAction.IsDefined(System.Type,System.Boolean)">
            <summary>
            获取Api行为或Api行为的声明类型是否声明了特性
            </summary>
            <param name="type">特性类型</param>
            <param name="inherit">是否继承</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.ApiAction.GetMethodFilterAttributes">
            <summary>
            获取方法级过滤器特性
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.ApiAction.GetClassFilterAttributes">
            <summary>
            获取类级过滤器特性
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.ApiAction.Execute(System.Object,System.Object[])">
            <summary>
            执行Api行为
            </summary>
            <param name="service">服务实例</param>
            <param name="parameters">参数实例</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.ApiAction.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.ApiName">
            <summary>
            获取Api行为的Api名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.IsVoidReturn">
            <summary>
            获取Api行为的方法成员返回类型是否为void
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.ReturnType">
            <summary>
            Api行为的方法成员返回类型
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.ParameterInfos">
            <summary>
            获取Api行为的参数信息
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.ParameterTypes">
            <summary>
            获取Api行为的方法成员参数类型
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.ParameterValues">
            <summary>
            获取Api行为的参数值
            </summary>
        </member>
        <member name="P:NetworkSocket.Core.ApiAction.DeclaringService">
            <summary>
            获取声明该成员的服务类型
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpAction.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Api行为
            </summary>
            <param name="method">方法信息</param>
            <param name="declaringType">声明的类型</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpAction.GetRoute(System.Type)">
            <summary>
            获取路由地址
            </summary>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpAction.GetAllowMethod(System.Reflection.MethodInfo)">
            <summary>
            获取支持的http请求方式
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpAction.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpAction.Equals(System.Object)">
            <summary>
            比较是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.HttpAction.Route">
            <summary>
            获取路由规则
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpAction.AllowMethod">
            <summary>
            获取是允许的请求方式
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.ActionContext">
            <summary>
            表示Http协议的Api执行上下文
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.RequestContext">
            <summary>
            表示Http请求上下文
            </summary>   
        </member>
        <member name="M:NetworkSocket.Http.RequestContext.#ctor(NetworkSocket.Http.HttpRequest,NetworkSocket.Http.HttpResponse)">
            <summary>
            请求上下文
            </summary>
            <param name="request">请求上下文对象</param>
            <param name="response">回复上下文对象</param>        
        </member>
        <member name="P:NetworkSocket.Http.RequestContext.Request">
            <summary>
            获取请求上下文对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.RequestContext.Response">
            <summary>
            获取回复上下文对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.RequestContext.Result">
            <summary>
            获取或设置结果
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.ActionContext.#ctor(NetworkSocket.Http.RequestContext,NetworkSocket.Http.HttpAction)">
            <summary>
            Api行为上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="action">Api行为</param>
        </member>
        <member name="M:NetworkSocket.Http.ActionContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.ActionContext.NetworkSocket#Core#IActionContext#Action">
            <summary>
            获取http行为对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.ActionContext.Action">
            <summary>
            获取http行为对象
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.ExceptionContext">
            <summary>
            表示Http协议的Api异常上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.ExceptionContext.#ctor(NetworkSocket.Http.ActionContext,System.Exception)">
            <summary>
            异常上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.Http.ExceptionContext.#ctor(NetworkSocket.Http.RequestContext,System.Exception)">
            <summary>
            异常上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.Http.ExceptionContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.ExceptionContext.Exception">
            <summary>
            获取异常对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.ExceptionContext.ExceptionHandled">
            <summary>
            获取或设置异常是否已处理
            设置为true之后有异常不会抛出
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpController">
            <summary>
            Http控制器基类
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.IHttpController">
            <summary>
            定义Http控制
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.IHttpController.Execute(NetworkSocket.Http.ActionContext)">
            <summary>
            执行Api行为
            </summary>              
            <param name="actionContext">Api行为上下文</param>      
        </member>
        <member name="F:NetworkSocket.Http.HttpController.currentContext">
            <summary>
            线程唯一上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.NetworkSocket#Http#IHttpController#Execute(NetworkSocket.Http.ActionContext)">
            <summary>
            执行Api行为
            </summary>   
            <param name="actionContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.Http.HttpController.ProcessExecutingException(NetworkSocket.Http.ActionContext,System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},System.Exception)">
            <summary>
            处理Api行为执行过程中产生的异常
            </summary>
            <param name="actionContext">上下文</param>
            <param name="actionfilters">过滤器</param>
            <param name="exception">异常项</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.ExecuteAction(NetworkSocket.Http.ActionContext,System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter})">
            <summary>
            调用自身实现的Api行为
            将返回值发送给客户端        
            </summary>       
            <param name="actionContext">上下文</param>       
            <param name="filters">过滤器</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.Content(System.String)">
            <summary>
            生成Content结果
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.Json(System.Object)">
            <summary>
            生成json结果
            </summary>
            <param name="data">内容</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.File(System.String)">
            <summary>
            生成文件结果
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.File(System.String,System.String)">
            <summary>
            生成文件结果
            </summary>
            <param name="fileName">文件名</param>
            <param name="contenType">内容类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.File(System.String,System.String,System.String)">
            <summary>
            生成文件结果
            </summary>
            <param name="fileName">文件名</param>
            <param name="contenType">内容类型</param>
            <param name="contentDisposition">内容描述</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.ExecFiltersBeforeAction(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.Http.ActionContext)">
            <summary>
            在Api行为前 执行过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="actionContext">上下文</param>   
        </member>
        <member name="M:NetworkSocket.Http.HttpController.ExecFiltersAfterAction(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.Http.ActionContext)">
            <summary>
            在Api行为后执行过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="actionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.Http.HttpController.ExecExceptionFilters(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.Http.ExceptionContext)">
            <summary>
            执行异常过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="exceptionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.Http.HttpController.Dispose">
            <summary>
            关闭和释放所有相关资源
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpController.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.Http.HttpController.CurrentContext">
            <summary>
            获取当前Api行为上下文
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpController.Request">
            <summary>
            获取请求上下文对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpController.Response">
            <summary>
            获取回复上下文对象
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpController.Server">
            <summary>
            获取http服务实例
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpController.IsDisposed">
            <summary>
            获取对象是否已释放
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpHeader">
            <summary>
            http头
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpNameValueCollection">
            <summary>
            表示可通过键或索引访问的集合
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpNameValueCollection.parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpNameValueCollection.#ctor">
            <summary>
            表示可通过键或索引访问的集合
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpNameValueCollection.#ctor(System.String)">
            <summary>
            表示可通过键或索引访问的集合
            </summary>
            <param name="parameters">参数</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpNameValueCollection.AddAsKeyValue(System.String)">
            <summary>
            填充集合
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:NetworkSocket.Http.HttpNameValueCollection.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Http.HttpNameValueCollection.HttpNameValueCollectionView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpNameValueCollection.HttpNameValueCollectionView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpNameValueCollection.HttpNameValueCollectionView.#ctor(NetworkSocket.Http.HttpNameValueCollection)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.Http.HttpNameValueCollection.HttpNameValueCollectionView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpHeader.#ctor">
            <summary>
            http头
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpHeader.#ctor(System.Text.RegularExpressions.CaptureCollection,System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            http头
            </summary>       
        </member>
        <member name="M:NetworkSocket.Http.HttpHeader.TryGet``1(System.String)">
            <summary>
            获取指定键的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpHeader.TryGet``1(System.String,``0)">
            <summary>
            获取指定键的值
            失败则返回defaultValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Http.HttpServer">
            <summary>
            表示Http服务
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpServerBase">
            <summary>
            Http监听服务
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpServerBase.OnCreateSession">
            <summary>
            创建新会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpServerBase.OnReceive(NetworkSocket.SessionBase,NetworkSocket.ReceiveStream)">
            <summary>
            收到tcp请求
            </summary>
            <param name="session">会话</param>
            <param name="buffer">数据</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpServerBase.OnHttpRequest(NetworkSocket.Http.HttpRequest,NetworkSocket.Http.HttpResponse)">
            <summary>
            收到Http请求
            </summary>       
            <param name="request">请求对象</param>
            <param name="response">回复对象</param>
        </member>
        <member name="F:NetworkSocket.Http.HttpServer.httpActionList">
            <summary>
            所有Http行为
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.#ctor">
            <summary>
            Http服务
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.BindController(System.Reflection.Assembly)">
            <summary>
            绑定程序集下的所有控制器         
            </summary>
            <param name="assembly">程序集</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.BindController``1">
            <summary>
            绑定控制器
            </summary>
            <typeparam name="TController">控制器类型</typeparam>        
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.BindController(System.Type[])">
            <summary>
            注册控制器
            </summary>
            <param name="controllers">控制器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.BindController(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册控制器
            </summary>
            <param name="controllers">控制器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.GetControllerHttpActions(System.Type)">
            <summary>
            获取服务类型的Api行为
            </summary>
            <param name="controller">服务类型</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.OnHttpRequest(NetworkSocket.Http.HttpRequest,NetworkSocket.Http.HttpResponse)">
            <summary>
            收到Http请求
            </summary>       
            <param name="request">请求对象</param>
            <param name="response">回复对象</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.ProcessRequest(NetworkSocket.Http.RequestContext)">
            <summary>
            处理http请求
            </summary>
            <param name="requestContext">请求上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.ProcessStaticFileRequest(System.String,NetworkSocket.Http.RequestContext)">
            <summary>
            处理静态资源请求
            </summary>
            <param name="extension">扩展名</param>
            <param name="requestContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.ProcessNormalRequest(System.String,NetworkSocket.Http.RequestContext)">
            <summary>
            处理一般的请求
            </summary>
            <param name="route">路由</param>
            <param name="requestContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.ProcessActionNotFound(System.String,NetworkSocket.Http.RequestContext)">
            <summary>
            处理找不到Action
            </summary>
            <param name="route">路由</param>
            <param name="requestContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpServer.ExecuteHttpAction(NetworkSocket.Http.HttpAction,NetworkSocket.Http.RequestContext)">
            <summary>
            执行httpAction
            </summary>
            <param name="action">httpAction</param>
            <param name="requestContext">上下文</param>      
        </member>
        <member name="P:NetworkSocket.Http.HttpServer.ModelBinder">
            <summary>
            获取模型生成器
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpServer.GlobalFilters">
            <summary>
            获取全局过滤器
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpServer.MIMECollection">
            <summary>
            获取MIME集合
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpServer.FilterAttributeProvider">
            <summary>
            获取或设置特性过滤器提供者
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpServer.DependencyResolver">
            <summary>
            获取或设置依赖关系解析提供者
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpMethod">
            <summary>
            请求方式
            目前只支持Get和Post两种
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpMethod.GET">
            <summary>
            Get
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpMethod.POST">
            <summary>
            Post
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpRequest">
            <summary>
            表示Http请求信息
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.#ctor">
            <summary>
            Http请求信息
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.GetValues(System.String)">
            <summary>
            从Query和Form获取请求参数的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.IsWebsocketRequest">
            <summary>
            获取是否为Websocket请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.IsAjaxRequest">
            <summary>
            是否为ajax请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.IsApplicationFormRequest">
            <summary>
            Content-Type是否为
            application/x-www-form-urlencoded
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.IsMultipartFormRequest(System.String@)">
            <summary>
            Content-Type是否为
            multipart/form-data
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.StringEquals(System.String,System.String)">
            <summary>
            获取是否相等
            不区分大小写
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.Parse(NetworkSocket.ReceiveStream,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            解析连接请求信息
            如果数据未完整则返回null
            </summary>
            <param name="buffer">接收到的原始数量</param>
            <param name="localEndpoint">服务器的本地终结点</param>
            <param name="remoteEndpoint">远程端的IP和端口</param>
            <exception cref="T:System.Web.HttpException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.GetHttpMethod(System.String)">
            <summary>
            获取http方法
            </summary>
            <param name="method">方法字符串</param>
            <exception cref="T:System.Web.HttpException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.GeneratePostFormAndFiles(NetworkSocket.Http.HttpRequest,NetworkSocket.ReceiveStream)">
            <summary>
            生成Post得到的表单和文件
            </summary>
            <param name="request"></param>
            <param name="buffer"></param>      
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.GenerateApplicationForm(NetworkSocket.Http.HttpRequest)">
            <summary>
            生成一般表单的Form
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:NetworkSocket.Http.HttpRequest.GenerateMultipartFormAndFiles(NetworkSocket.Http.HttpRequest,NetworkSocket.ReceiveStream,System.String)">
            <summary>
            生成表单和文件
            </summary>
            <param name="request"></param>
            <param name="buffer"></param>   
            <param name="boundary">边界</param>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Headers">
            <summary>
            获取请求的头信息
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Query">
            <summary>
            获取Query
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Form">
            <summary>
            获取Form 
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Files">
            <summary>
            获取请求的文件
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.InputStrem">
            <summary>
            获取请求的流
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.HttpMethod">
            <summary>
            获取请求方法
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Path">
            <summary>
            获取请求路径
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Url">
            <summary>
            获取请求的Uri
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.LocalEndPoint">
            <summary>
            获取监听的本地IP和端口
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.RemoteEndPoint">
            <summary>
            获取远程端的IP和端口
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpRequest.Item(System.String)">
            <summary>
            从Query和Form获取请求参数的值
            多个值会以逗号分隔
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Http.HttpResponse">
            <summary>
            Http回复
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpResponse.session">
            <summary>
            会话对象
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpResponse.wroteHeader">
            <summary>
            是否已写头信息
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.#ctor(NetworkSocket.SessionBase)">
            <summary>
            表示http回复
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.IsIgnoreKey(System.String)">
            <summary>
            忽略的key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.GenerateContentType">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.GetHeaderBytes(System.Int32)">
            <summary>
            生成头部数据
            </summary>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.WriteHeader(System.Int32)">
            <summary>
            输出头数据
            </summary>
            <param name="contentLength">内容长度</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.WriteContent(NetworkSocket.ByteRange)">
            <summary>
            输出内容
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.Write(System.String)">
            <summary>
            输出文本内容
            </summary>      
            <param name="content">内容</param>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.TrySend(NetworkSocket.ByteRange)">
            <summary>
            尝试发送数据到客户端
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.HttpResponse.End">
            <summary>
            主动关闭连接
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.IsConnected">
            <summary>
            获取是否已连接到远程端
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.RemoteEndPoint">
            <summary>
            获取远程终结点
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.Status">
            <summary>
            获取或设置Http状态
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.StatusDescription">
            <summary>
            获取或设置输出的 HTTP 状态字符串
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.Charset">
            <summary>
            获取或设置内容体的编码
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.Headers">
            <summary>
            获取回复头信息
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.ContentType">
            <summary>
            获取或设置Header的内容类型
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.HttpResponse.ContentDisposition">
            <summary>
            获取或设置Header的内容描述
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.HttpActionList">
            <summary>
            表示Api行为列表
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpActionList.HttpMethod_ALL">
            <summary>
            全部http方法
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.HttpActionList.dictionary">
            <summary>
            Api行为字典
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.HttpActionList.Add(NetworkSocket.Http.HttpAction)">
            <summary>
            添加Api行为
            </summary>
            <param name="httpAction">Api行为</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpActionList.AddRange(System.Collections.Generic.IEnumerable{NetworkSocket.Http.HttpAction})">
            <summary>
            添加Api行为
            </summary>
            <param name="apiActions">Api行为</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Http.HttpActionList.TryGet(NetworkSocket.Http.HttpRequest)">
            <summary>
            获取http行为
            如果获取不到则返回null
            </summary>
            <param name="request">请求上下文</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Http.DefaultModelBinder">
            <summary>
            默认的模型生成器
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.IModelBinder">
            <summary>
            模型生成器
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.IModelBinder.BindModel(NetworkSocket.Http.HttpRequest,System.Reflection.ParameterInfo)">
            <summary>
            生成模型
            </summary>
            <param name="request">请求数据</param>
            <param name="parameter">参数</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.DefaultModelBinder.BindModel(NetworkSocket.Http.HttpRequest,System.Reflection.ParameterInfo)">
            <summary>
            生成模型
            </summary>
            <param name="request">请求数据</param>
            <param name="parameter">参数</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.DefaultModelBinder.ConvertToClass(NetworkSocket.Http.HttpRequest,System.Reflection.ParameterInfo)">
            <summary>
            转换为类
            </summary>
            <param name="parameter">参数</param>
            <param name="request">请求数据</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Http.PropertySetter">
            <summary>
            表示属性的Setter
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.PropertySetter.cached">
            <summary>
            类型属性的Setter缓存
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.PropertySetter.GetPropertySetters(System.Type)">
            <summary>
            从类型的属性获取Setter
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="F:NetworkSocket.Http.PropertySetter.methodInvoker">
            <summary>
            Api行为的方法成员调用委托
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.PropertySetter.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性的Setter
            </summary>       
            <param name="property">属性</param>        
        </member>
        <member name="M:NetworkSocket.Http.PropertySetter.SetValue(System.Object,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="instance">实例</param>
            <param name="value">属性的值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.PropertySetter.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Http.PropertySetter.IsPrimitive(System.Type)">
            <summary>
            类型是否为所支持的简单类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Http.PropertySetter.Name">
            <summary>
            获取属性的名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Http.PropertySetter.Type">
            <summary>
            获取属性的类型
            </summary>
        </member>
        <member name="T:NetworkSocket.Http.JsonResult">
            <summary>
            表示application/json内容
            </summary>
        </member>
        <member name="F:NetworkSocket.Http.JsonResult.data">
            <summary>
            内容
            </summary>
        </member>
        <member name="M:NetworkSocket.Http.JsonResult.#ctor(System.Object)">
            <summary>
            application/json内容
            </summary>
            <param name="data">内容</param>
        </member>
        <member name="M:NetworkSocket.Http.JsonResult.ExecuteResult(NetworkSocket.Http.RequestContext)">
            <summary>
            执行结果
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:NetworkSocket.Exceptions.SessionAcceptExcetion">
            <summary>
            表示接收会话异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.SessionAcceptExcetion.#ctor(System.Net.Sockets.SocketException)">
            <summary>
            接收会话异常
            </summary>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:NetworkSocket.Exceptions.SessionCreateException">
            <summary>
            表示创建会话异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.SessionCreateException.#ctor(System.Exception)">
            <summary>
            创建会话异常
            </summary>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:NetworkSocket.Exceptions.ApiExecuteException">
            <summary>
            表示Api执行异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.ApiExecuteException.#ctor(System.Exception)">
            <summary>
            Api执行异常
            </summary>       
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:NetworkSocket.Exceptions.ApiExecuteException.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Exceptions.ApiNotExistException">
            <summary>
            表示Api不存在引发的异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.ApiNotExistException.#ctor(System.String)">
            <summary>
            Api不存在引发的异常
            </summary>
            <param name="name">Api名称</param>
        </member>
        <member name="P:NetworkSocket.Exceptions.ApiNotExistException.Name">
            <summary>
            获取Api名称
            </summary>
        </member>
        <member name="T:NetworkSocket.Exceptions.RemoteException">
            <summary>
            表示远程端Api行为异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.RemoteException.#ctor(System.String)">
            <summary>
            远程端Api行为异常
            </summary>       
            <param name="message">异常信息</param>
        </member>
        <member name="T:NetworkSocket.Exceptions.ResolveException">
            <summary>
            表示依赖反转异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.ResolveException.#ctor(System.Type,System.Exception)">
            <summary>
            依赖反转异常
            </summary>
            <param name="type">要反转的类型</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:NetworkSocket.Exceptions.SerializerException">
            <summary>
            表示序列化或反序列化过程中产生的异常
            </summary>
        </member>
        <member name="M:NetworkSocket.Exceptions.SerializerException.#ctor(System.Exception)">
            <summary>
            表示序列化或反序列化过程中产生的异常
            </summary>
            <param name="inner">异常内部</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:NetworkSocket.Core.IDependencyResolver">
            <summary>
            定义可简化服务位置和依赖关系解析的方法
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.IDependencyResolver.GetService(System.Type)">
            <summary>
            解析支持任意对象创建的一次注册的服务
            </summary>
            <param name="serviceType">所请求的服务或对象的类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.IDependencyResolver.TerminateService(System.IDisposable)">
            <summary>
            结束服务实例的生命
            </summary>
            <param name="service">服务实例</param>
        </member>
        <member name="T:NetworkSocket.Core.DefaultDependencyResolver">
            <summary>
            默认的依赖关系解析程序的实现
            </summary>
        </member>
        <member name="F:NetworkSocket.Core.DefaultDependencyResolver.serviceResolver">
            <summary>
            服务实例反转缓存
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.DefaultDependencyResolver.GetService(System.Type)">
            <summary>
            解析支持任意对象创建的一次注册的服务
            </summary>
            <param name="serviceType">所请求的服务或对象的类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultDependencyResolver.TerminateService(System.IDisposable)">
            <summary>
            结束服务实例的生命
            </summary>
            <param name="service">服务实例</param>
        </member>
        <member name="T:NetworkSocket.Core.DefaultSerializer">
            <summary>
            默认提供的Json序列化工具
            </summary>
        </member>
        <member name="T:NetworkSocket.Core.ISerializer">
            <summary>
            定义对象的序列化与反序列化的接口
            异常时抛出SerializerException
            </summary>
        </member>
        <member name="M:NetworkSocket.Core.ISerializer.Serialize(System.Object)">
            <summary>
            序列化为二进制
            异常时抛出SerializerException
            </summary>
            <param name="model">实体</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.ISerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化为实体
            异常时抛出SerializerException
            </summary>
            <param name="bytes">数据</param>
            <param name="type">实体类型</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultSerializer.Serialize(System.Object)">
            <summary>
            序列化为二进制
            </summary>
            <param name="model">实体</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化为实体
            </summary>
            <param name="bytes">数据</param>
            <param name="type">实体类型</param>
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Core.DefaultSerializer.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.TagData">
            <summary>
            表示用户附加数据
            </summary>
        </member>
        <member name="T:NetworkSocket.ITag">
            <summary>
            用户附加数据接口
            </summary>
        </member>
        <member name="M:NetworkSocket.ITag.Set(System.String,System.Object)">
            <summary>
            设置用户数据
            </summary>
            <param name="key">键(不区分大小写)</param>
            <param name="value">用户数据</param>
        </member>
        <member name="M:NetworkSocket.ITag.IsExist(System.String)">
            <summary>
            是否存在键
            </summary>
            <param name="key">键(不区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ITag.TryGet(System.String)">
            <summary>
            尝试获取值
            获取失败则返回类型的默认值
            </summary>       
            <param name="key">键(不区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ITag.TryGet``1(System.String)">
            <summary>
            尝试获取值
            获取失败则返回类型的默认值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键(不区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ITag.TryGet``1(System.String,``0)">
            <summary>
            尝试获取值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键(不区分大小写)</param>
            <param name="defaultValue">获取失败返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ITag.TryGet(System.String,System.Object@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key">键(不区分大小写)</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ITag.Remove(System.String)">
            <summary>
            删除用户数据
            </summary>
            <param name="key">键(不区分大小写)</param>
        </member>
        <member name="M:NetworkSocket.ITag.Clear">
            <summary>
            清除所有用户数据
            </summary>
        </member>
        <member name="F:NetworkSocket.TagData.dic">
            <summary>
            原始数据字典
            </summary>
        </member>
        <member name="M:NetworkSocket.TagData.Set(System.String,System.Object)">
            <summary>
            设置用户数据
            </summary>
            <param name="key">键(不区分大小写)</param>
            <param name="value">用户数据</param>
        </member>
        <member name="M:NetworkSocket.TagData.IsExist(System.String)">
            <summary>
            是否存在键
            </summary>
            <param name="key">键(不区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagData.TryGet(System.String)">
            <summary>
            尝试获取值
            获取失败则返回类型的默认值
            </summary>       
            <param name="key">键(不区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagData.TryGet``1(System.String)">
            <summary>
            尝试获取值
            获取失败则返回类型的默认值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagData.TryGet``1(System.String,``0)">
            <summary>
            尝试获取值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="defaultValue">获取失败返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagData.TryGet(System.String,System.Object@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagData.Remove(System.String)">
            <summary>
            删除用户数据
            </summary>
            <param name="key">键(不区分大小写)</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagData.Clear">
            <summary>
            清除所有用户数据
            </summary>
        </member>
        <member name="P:NetworkSocket.TagData.KeyValues">
            <summary>
            所有键值
            </summary>
        </member>
        <member name="T:NetworkSocket.TagData.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.TagData.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.TagData.DebugView.#ctor(NetworkSocket.TagData)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.TagData.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.EventArgBufferSetter">
            <summary>
            提供设置SocketAsyncEventArgs缓冲区
            </summary>
        </member>
        <member name="F:NetworkSocket.EventArgBufferSetter.ARG_BUFFER_SIZE">
            <summary>
            获取SocketAsyncEventArgs的缓存区大小(8k)
            </summary>
        </member>
        <member name="F:NetworkSocket.EventArgBufferSetter.BUFFER_BLOCK_SIZE">
            <summary>
            获取接收或发送的缓冲区连续内存块大小(2M) 
            </summary>
        </member>
        <member name="F:NetworkSocket.EventArgBufferSetter.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:NetworkSocket.EventArgBufferSetter.bufferBlockList">
            <summary>
            缓冲区块列表
            </summary>
        </member>
        <member name="M:NetworkSocket.EventArgBufferSetter.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:NetworkSocket.EventArgBufferSetter.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            设置SocketAsyncEventArgs缓存区
            </summary>        
            <param name="arg">SocketAsyncEventArgs对象</param>
            <exception cref="T:System.OutOfMemoryException"></exception>
        </member>
        <member name="P:NetworkSocket.EventArgBufferSetter.BufferBlockCount">
            <summary>
            获取缓冲区内存块的数量 
            </summary>
        </member>
        <member name="T:NetworkSocket.EventArgBufferSetter.BufferBlock">
            <summary>
            表示缓冲区数据块
            非线程安全类型
            </summary>
        </member>
        <member name="F:NetworkSocket.EventArgBufferSetter.BufferBlock.offset">
            <summary>
            偏移量
            </summary>
        </member>
        <member name="F:NetworkSocket.EventArgBufferSetter.BufferBlock.buffer">
            <summary>
            数据内容
            </summary>
        </member>
        <member name="M:NetworkSocket.EventArgBufferSetter.BufferBlock.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            设置SocketAsyncEventArgs缓存区
            </summary>        
            <param name="arg">SocketAsyncEventArgs对象</param>
        </member>
        <member name="P:NetworkSocket.EventArgBufferSetter.BufferBlock.CanSetBuffer">
            <summary>
            获取是否可以设置Buffer
            </summary>
        </member>
        <member name="T:NetworkSocket.Policies.FlexPolicyServer">
            <summary>
            Flex通讯策略服务   
            </summary>
        </member>
        <member name="M:NetworkSocket.Policies.FlexPolicyServer.StartListen">
            <summary>
            启动策略服务             
            </summary>
            <exception cref="!:SocketException"></exception>
        </member>
        <member name="M:NetworkSocket.Policies.FlexPolicyServer.OnCreateSession">
            <summary>
            创建新的会话对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Policies.FlexPolicyServer.OnReceive(NetworkSocket.SessionBase,NetworkSocket.ReceiveStream)">
            <summary>
            接收到策略请求
            </summary>
            <param name="session">会话对象</param>
            <param name="buffer">数据</param>      
        </member>
        <member name="M:NetworkSocket.Policies.FlexPolicyServer.GeneratePolicyXml(System.String)">
            <summary>
            生成策略xml
            返回null则不发送策略文件 
            </summary>
            <param name="input">请求内容</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Policies.FlexPolicyServer.Port">
            <summary>
            获取策略服务端口
            843
            </summary>
        </member>
        <member name="T:NetworkSocket.Policies.SilverlightPolicyServer">
            <summary>
            Siverlight通讯策略服务   
            </summary>
        </member>
        <member name="M:NetworkSocket.Policies.SilverlightPolicyServer.GeneratePolicyXml(System.String)">
            <summary>
            生成策略xml
            返回null则不发送策略文件 
            </summary>
            <param name="input">请求内容</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Policies.SilverlightPolicyServer.Port">
            <summary>
            获取策略服务端口
            943
            </summary>
        </member>
        <member name="T:NetworkSocket.ReceiveStream">
            <summary>
            表示会话接收到的历史数据
            非线程安全类型  
            </summary>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.#ctor">
            <summary>
            会话接收到的历史数据
            </summary>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadBoolean">
            <summary>
            从流中读取一个字节，并将流内的位置向前推进一个字节，如果已到达流的末尾，则返回 -1
            </summary>       
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadByte">
            <summary>
            从流中读取一个字节，并将流内的位置向前推进一个字节，如果已到达流的末尾，则返回 -1
            </summary>      
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadInt16">
            <summary>
            从流中读取2个字节，并将流内的位置向前推进2个字节，
            返回其Int16表示类型
            </summary>     
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadUInt16">
            <summary>
            从流中读取2个字节，并将流内的位置向前推进2个字节，
            返回其UInt16表示类型
            </summary>      
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadInt32">
            <summary>
            从流中读取4个字节，并将流内的位置向前推进4个字节，
            返回其Int32表示类型
            </summary>          
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadUInt32">
            <summary>
            从流中读取4个字节，并将流内的位置向前推进4个字节，
            返回其UInt32表示类型
            </summary>     
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadInt64">
            <summary>
            从流中读取8个字节，并将流内的位置向前推进8个字节，
            返回其Int64表示类型
            </summary>         
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadUInt64">
            <summary>
            从流中读取8个字节，并将流内的位置向前推进8个字节，
            返回其UInt64表示类型
            </summary>        
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadArray">
            <summary>
            从流中读取到末尾的字节，并将流内的位置向前推进相同的字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadArray(System.Int32)">
            <summary>
            从流中读取count字节，并将流内的位置向前推进count字节
            </summary>
            <param name="count">要读取的字节数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadString(System.Text.Encoding)">
            <summary>
            从流中读取Position到末尾的所有字节，并将流内的位置推到末尾
            返回以指定编码转换的字符串
            </summary>  
            <param name="encode">编码</param>        
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            从流中读取count字节，并将流内的位置向前推进count字节
            返回以指定编码转换的字符串
            </summary>        
            <param name="count">字节数</param>
            <param name="encode">编码</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.CopyTo(System.Byte[],System.Int32)">
            <summary>
            从开始位置将指定长度的数据复制到目标数组
            </summary>
            <param name="dstArray">目标数组</param>     
            <param name="count">要复制的字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.CopyTo(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从开始位置将指定长度的数据复制到目标数组
            </summary>
            <param name="dstArray">目标数组</param>
            <param name="dstOffset">目标数组偏移量</param>
            <param name="count">要复制的字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定偏移位置将数据复制到目标数组
            </summary>
            <param name="srcOffset">偏移量</param>
            <param name="dstArray">目标数组</param>
            <param name="dstOffset">目标数组偏移量</param>
            <param name="count">要复制的字节数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.Clear">
            <summary>
            清空所有数据    
            等同SetLength(0L)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.Clear(System.Int32)">
            <summary>
            从开始位置清除数据        
            </summary>
            <param name="count">清除的字节数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.IndexOf(System.Byte[])">
            <summary>
            从Position位置开始查找第一个匹配的值
            返回相对于Position的偏移量
            </summary>
            <param name="binary">要匹配的数据</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.SequenceEqual(System.Int32,System.Byte[])">
            <summary>
            是否和目标binary相等
            </summary>
            <param name="index">索引</param>
            <param name="binary">要匹配的数据</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.SyncRoot">
            <summary>
            获取同步锁对象
            </summary>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.Endian">
            <summary>
            获取或设置字节存储次序
            默认为Endians.Big
            </summary>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.Length">
            <summary>
            获取用字节表示的流长度
            </summary>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.LongLength">
            <summary>
            获取用字节表示的流长度
            </summary>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.Position">
            <summary>
            获取或设置流中的当前位置
            </summary>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.LongPosition">
            <summary>
            获取或设置流中的当前位置
            </summary>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.Item(System.Int32)">
            <summary>
            获取指定位置的字节
            </summary>
            <param name="index">索引</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.ReceiveStream.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.ReceiveStream.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.ReceiveStream.DebugView.#ctor(NetworkSocket.ReceiveStream)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.ReceiveStream.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.ServerExtraState">
            <summary>
            表示服务器额外信息
            </summary>
        </member>
        <member name="F:NetworkSocket.ServerExtraState.getFreeSessionCountFunc">
            <summary>
            获取空闲的会话对象数量
            </summary>
        </member>
        <member name="F:NetworkSocket.ServerExtraState.getTotalSessionCountFunc">
            <summary>
            获取所有的会话数量
            </summary>
        </member>
        <member name="M:NetworkSocket.ServerExtraState.#ctor(System.Func{System.Int32},System.Func{System.Int32},System.Func{System.Int32})">
            <summary>
            表示服务器额外信息
            </summary>
            <param name="getFreeSessionCountFunc">获取空闲的会话对象数量</param>
            <param name="getTotalSessionCountFunc">获取所有的会话数量</param>
            <param name="getAcceptFailureTimesFunc">获取接受会话失败的次数</param>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.getAcceptFailureTimesFunc">
            <summary>
            获取接受会话失败的次数
            </summary>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.RecvArgBufferSize">
            <summary>
            获取用于接收的SocketAsyncEventArgs对象的缓冲区大小
            </summary>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.RecvArgBufferBlockSize">
            <summary>
            获取接收缓冲区连续内存块大小 
            </summary>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.RecvArgBufferBlockCount">
            <summary>
            获取接收缓冲区连续内存块的数量
            </summary>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.FreeSessionCount">
            <summary>
            获取已回收的会话对象的数量
            </summary>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.TotalSessionCount">
            <summary>
            获取所有的会话对象数量
            含FreeSession
            </summary>
        </member>
        <member name="P:NetworkSocket.ServerExtraState.AcceptFailureTimes">
            <summary>
            获取接受会话失败的次数
            </summary>
        </member>
        <member name="T:NetworkSocket.SessionExtraState">
            <summary>
            表示会话额外信息
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionExtraState.sendByteCount">
            <summary>
            发送字节数
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionExtraState.recvByteCount">
            <summary>
            接收字节数
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionExtraState.sendTimes">
            <summary>
            发送总次数
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionExtraState.recvTimes">
            <summary>
            接收总次数
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionExtraState.#ctor">
            <summary>
            表示额外信息
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionExtraState.SetBinded">
            <summary>
            绑定时更新信息
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionExtraState.SetSended(System.Int32)">
            <summary>
            更新发送信息
            </summary>
            <param name="byteCount">发送的字节数</param>
        </member>
        <member name="M:NetworkSocket.SessionExtraState.SetRecved(System.Int32)">
            <summary>
            更新接收信息
            </summary>
            <param name="byteCount">接收的字节数</param>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.ConnectedTime">
            <summary>
            获取连接成功的时间
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.LastSendTime">
            <summary>
            获取最近一次发送数据的时间
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.LastRecvTime">
            <summary>
            获取最近一次发送数据的时间
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.MaxSendSize">
            <summary>
            获取最大发送的数据包字节数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.MaxRecvSize">
            <summary>
            获取最大接收的数据包字节数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.MinSendSize">
            <summary>
            获取最小发送的数据包字节数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.MinRecvSize">
            <summary>
            获取最小接收的数据包字节数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.SendTimes">
            <summary>
            获取发送总次数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.RecvTimes">
            <summary>
            获取接收总次数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.TotalSendByteCount">
            <summary>
            获取发送字节总数
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionExtraState.TotalRecvByteCount">
            <summary>
            获取接收字节总数
            </summary>
        </member>
        <member name="T:NetworkSocket.TcpSnapshot">
            <summary>
            提供获取Tcp端口快照信息
            </summary>
        </member>
        <member name="M:NetworkSocket.TcpSnapshot.Snapshot">
            <summary>
            获取一次IPv4的Tcp端口快照信息
            </summary>     
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpSnapshot.Snapshot(System.Net.Sockets.AddressFamily)">
            <summary>
            获取一次Tcp端口快照信息
            </summary>
            <param name="ipVersion">ip版本</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.TcpSnapshot.PortOwnerPid">
            <summary>
            表示端口的占用进程的id
            </summary>
        </member>
        <member name="M:NetworkSocket.TcpSnapshot.PortOwnerPid.Kill">
            <summary>
            杀掉占用端口的进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpSnapshot.PortOwnerPid.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TcpSnapshot.PortOwnerPid.Equals(System.Object)">
            <summary>
            比较是否相等
            </summary>
            <param name="obj">目标对象</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.TcpSnapshot.PortOwnerPid.Port">
            <summary>
            获取Tcp端口
            </summary>
        </member>
        <member name="P:NetworkSocket.TcpSnapshot.PortOwnerPid.OwerPid">
            <summary>
            获取占用端口的进程id
            </summary>
        </member>
        <member name="T:NetworkSocket.TcpSnapshot.MIB_TCPROW_OWNER_PID">
            <summary>
            端口进程信息
            </summary>
        </member>
        <member name="T:NetworkSocket.SessionCollection`1">
            <summary>
            表示会话对象集合 
            线程安全类型
            </summary>   
            <typeparam name="T">会话</typeparam>
        </member>
        <member name="F:NetworkSocket.SessionCollection`1.dic">
            <summary>
            线程安全字典
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            添加 
            如果已包含此元素则不会增加记录
            </summary>
            <param name="session">会话</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            清除所有元素
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="session">会话</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            复制到数组
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            移除    
            </summary>
            <param name="session">会话对象</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.SessionCollection`1.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            获取元素数量 
            </summary>
        </member>
        <member name="P:NetworkSocket.SessionCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="T:NetworkSocket.SessionCollectionDebugView`1">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.SessionCollectionDebugView`1.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.SessionCollectionDebugView`1.#ctor(NetworkSocket.SessionCollection{`0})">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.SessionCollectionDebugView`1.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.FreeSessionQueue`1">
            <summary>
            空闲的会话对象集合
            线程安全类型
            </summary>
            <typeparam name="T">会话</typeparam>   
        </member>
        <member name="F:NetworkSocket.FreeSessionQueue`1.queue">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:NetworkSocket.FreeSessionQueue`1.Add(`0)">
            <summary>
            添加会话对象
            </summary>
            <param name="session">会话对象</param>
        </member>
        <member name="M:NetworkSocket.FreeSessionQueue`1.Take">
            <summary>
            取出会话对象
            如果取出失败则返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.FreeSessionQueue`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:NetworkSocket.FreeSessionQueue`1.Count">
            <summary>
            获取会话对象数量
            </summary>
        </member>
        <member name="T:NetworkSocket.TagBag">
            <summary>
            表示用户附加数据
            </summary>    
        </member>
        <member name="F:NetworkSocket.TagBag.tagData">
            <summary>
            原始数据字典
            </summary>
        </member>
        <member name="M:NetworkSocket.TagBag.#ctor(NetworkSocket.TagData)">
            <summary>
            用户附加数据
            </summary>
            <param name="tagData">用户附加数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.TagBag.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员的值
            </summary>
            <param name="binder">成员</param>
            <param name="result">结果</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.TagBag.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            设置成员的值
            </summary>
            <param name="binder">成员</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.TagBag.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:NetworkSocket.TagBag.DebugView.view">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:NetworkSocket.TagBag.DebugView.#ctor(NetworkSocket.TagBag)">
            <summary>
            调试视图
            </summary>
            <param name="view">查看的对象</param>
        </member>
        <member name="P:NetworkSocket.TagBag.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.IValidRule">
            <summary>
            定义属性的验证规则的行为
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.IValidRule.IsValid(System.Object,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.IValidRule.FormatErrorMessage(System.String)">
            <summary>
            格式化错误信息
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.IValidRule.OrderIndex">
            <summary>
            获取或设置排序索引
            越小越优先
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Model">
            <summary>
            实体验证  
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Model.ValidFor``1(``0)">
            <summary>
            验证模型
            </summary>
            <typeparam name="T">模型类型</typeparam>
            <param name="model">模型实例</param>        
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Validation.Property">
            <summary>
            表示反射优化过的属性    
            </summary>   
        </member>
        <member name="F:NetworkSocket.Validation.Property.propertyCached">
            <summary>
            类型的属性缓存
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Property.GetTypeValidPropertys(System.Type)">
            <summary>
            获取有类型带有验证规则特性的属性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.Property.GetProperties(System.Type)">
            <summary>
            获取类型的所有属性的get方法
            </summary>
            <param name="type">类型</param>       
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="F:NetworkSocket.Validation.Property.getter">
            <summary>
            属性的Get方法
            </summary>
        </member>
        <member name="F:NetworkSocket.Validation.Property.setter">
            <summary>
            属性的Set方法
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Property.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性
            </summary>
            <param name="property">属性</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.Validation.Property.GetValidRules(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的验证规则
            </summary>
            <param name="property">属性</param>        
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.Property.GetValue(System.Object)">
            <summary>
            获取属性的值
            </summary>
            <param name="instance">实例</param>  
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.Property.SetValue(System.Object,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="instance">实例</param>
            <param name="value">值</param>
        </member>
        <member name="M:NetworkSocket.Validation.Property.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.Property.Name">
            <summary>
            获取属性名
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.Property.Source">
            <summary>
            获取原始的属性
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.Property.ValidRules">
            <summary>
            获取属性的验证规则
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.ValidContext">
            <summary>
            表示验证上下文
            不可继承
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.ValidContext.Instance">
            <summary>
            获取或设置模型的实例
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.ValidContext.Properties">
            <summary>
            获取或设置实例类型的属性
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.ValidResult">
            <summary>
            表示验证结果
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.ValidResult.State">
            <summary>
            获取验证状态
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.ValidResult.ProperyName">
            <summary>
            获取验证不通过属性名称
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.ValidResult.ErrorMessage">
            <summary>
            获取验证不通过提示语
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.ValidRuleBase">
            <summary>
            验证规则特性基础类
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.ValidRuleBase.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            根据当前的验证特性来验证指定的值
            </summary>
            <param name="value">值</param>
            <param name="validationContext">上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.ValidRuleBase.IsValid(System.Object)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.ValidRuleBase.NetworkSocket#Validation#IValidRule#IsValid(System.Object,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.ValidRuleBase.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.ValidRuleBase.FormatErrorMessage(System.String)">
            <summary>
            格式化错误提示信息
            </summary>
            <param name="name">字段名字</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.ValidRuleBase.OrderIndex">
            <summary>
            获取或设置排序索引
            越小越优先
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.EmailAttribute">
            <summary>
            表示验证是邮箱格式
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.EmailAttribute.#ctor">
            <summary>
            验证是邮箱格式
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.EmailAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.EqualToAttribute">
            <summary>
            表示验证是否和目标ID的值一致
            </summary>
        </member>
        <member name="F:NetworkSocket.Validation.Rules.EqualToAttribute.propertyName">
            <summary>
            目标属性的名称
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.EqualToAttribute.#ctor(System.String)">
            <summary>
            验证是否和目标ID的值一致
            </summary>        
            <param name="propertyName">目标id</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.EqualToAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.LengthAttribute">
            <summary>
            表示验证输入的长度范围
            maxLength参数会影响EF-CodeFirst生成的数据库字段最大长度
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.LengthAttribute.#ctor(System.Int32)">
            <summary>
            验证输入的长度范围
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.LengthAttribute.NetworkSocket#Validation#IValidRule#IsValid(System.Object,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.LengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            获取错误提示信息
            </summary>       
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.LengthAttribute.OrderIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.MatchAttribute">
            <summary>
            表示验证是否和正则表达式匹配
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.MatchAttribute.#ctor(System.String)">
            <summary>
            验证是否和正则表达式匹配
            </summary>
            <param name="pattern">正则表达式</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.MatchAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.MatchAttribute.RegexPattern">
            <summary>
            获取或设置正则表达式
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.NotEqualToAttribute">
            <summary>
            表示验证不要和目标ID的值一致
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.NotEqualToAttribute.#ctor(System.String)">
            <summary>
            验证不要和目标ID的值一致
            </summary>       
            <param name="targetId">目标id</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.NotEqualToAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.NotMatchAttribute">
            <summary>
            表示验证不要和正则表达式匹配
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.NotMatchAttribute.#ctor(System.String)">
            <summary>
            验证不要和正则表达式匹配
            </summary>
            <param name="pattern">正则表达式</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.NotMatchAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.PrecisionAttribute">
            <summary>
            表示精度验证
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.PrecisionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            表示精度验证
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.PrecisionAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.PrecisionAttribute.FormatErrorMessage(System.String)">
            <summary>
            获取错误提示信息
            </summary>     
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.PrecisionAttribute.Min">
            <summary>
            获取或设置最小精度
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.PrecisionAttribute.Max">
            <summary>
            获取或设置最大精度
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.RangeAttribute">
            <summary>
            表示验值要在一定的区间中
            支持整型和双精度型验证
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            验值要在一定的区间中
            </summary>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            验值要在一定的区间中
            </summary>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.RangeAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.RangeAttribute.FormatErrorMessage(System.String)">
            <summary>
            获取错误提示信息
            </summary>     
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.RangeAttribute.MinValue">
            <summary>
            获取或设置最小值
            </summary>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.RangeAttribute.MaxValue">
            <summary>
            获取或设置最大值
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.RequiredAttribute">
            <summary>
            表示要求必须输入
            此特性影响EF-CodeFirst生成的数据库字段为非空约束
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.RequiredAttribute.#ctor">
            <summary>
            要求必须输入
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.RequiredAttribute.NetworkSocket#Validation#IValidRule#IsValid(System.Object,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Validation.Rules.RequiredAttribute.OrderIndex">
            <summary>
            获取或设置排序索引
            越小越优先
            </summary>
        </member>
        <member name="T:NetworkSocket.Validation.Rules.UrlAttribute">
            <summary>
            表示验证是网络地址
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.UrlAttribute.#ctor">
            <summary>
            验证是网络地址
            </summary>
        </member>
        <member name="M:NetworkSocket.Validation.Rules.UrlAttribute.IsValid(System.String,NetworkSocket.Validation.ValidContext)">
            <summary>
            验证属性的值是否通过
            </summary>
            <param name="value">属性的值</param>
            <param name="validContext">验证上下文</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.LimitedTask">
            <summary>
            提供可限制并发任务数  
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.Factory">
            <summary>
            提供限制同时工作任务数的任务工厂
            默认MaxTaskCount为Environment.ProcessorCount * 5
            可通过LimitTask.SetFactoryMaxTaskCount来调整数量
            </summary>
        </member>
        <member name="M:NetworkSocket.LimitedTask.SetFactoryMaxTaskCount(System.Int32)">
            <summary>
            设置LimitTask.Factory的最大并发数
            </summary>
            <param name="maxTaskCount">最大同事工作的任务数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.LimitedTask.NewFactory(System.Int32)">
            <summary>
            创建一个可限制并发任务数的任务工厂
            </summary>
            <param name="maxTaskCount">最大并发任务数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.LimitedTask.LimitedTaskScheduler">
            <summary>
            并发任务限制调度器
            这里参考了微软提供的源代码
            https://msdn.microsoft.com/en-us/library/ee789351.aspx
            </summary>       
            <summary> 
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.LimitedTaskScheduler.ThreadWorking">
            <summary>
            当前线程是否处理任务项
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.LimitedTaskScheduler.maxTaskCount">
            <summary>
            允许的最大并发数
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.LimitedTaskScheduler.currentTaskCount">
            <summary>
            当前正在运行的任务数
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.LimitedTaskScheduler.scheduledTasks">
            <summary>
            排队执行的任务
            </summary>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.#ctor(System.Int32)">
            <summary>
            并发限制任务调度器
            </summary>
            <param name="maxTaskCount">最大并发数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.SetMaxTaskCount(System.Int32)">
            <summary>
            设置最大并发数
            </summary>
            <param name="maxTaskCount">最大并发数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            将Task排队到计划程序中
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.ExecutePendingTasks(System.Object)">
            <summary>
            在线程池中执行所有待执行的任务
            </summary>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>
            尝试将以前排队到此计划程序中的Task取消排队
            </summary>
            <param name="task">要取消排队的Task</param>
            <returns>一个布尔值，该值指示是否已成功地将 task 参数取消排队</returns>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.GetScheduledTasks">
            <summary>
            生成当前排队到计划程序中等待执行的Task实例的枚举
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns>一个允许遍历当前排队到此计划程序中的任务的枚举</returns>
        </member>
        <member name="M:NetworkSocket.LimitedTask.LimitedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            确定是否可以在此调用中同步执行提供的Task，如果可以，将执行该任务 
            </summary>
            <param name="task">任务</param>
            <param name="taskWasPreviouslyQueued">指示任务之前是否已排队。如果此参数为 True，则该任务以前可能已排队（已计划）；如果为 False，则已知该任务尚未排队，此时将执行此调用，以便以内联方式执行该任务，而不用将其排队。</param>
            <returns>指示是否已以内联方式执行该任务</returns>
        </member>
        <member name="P:NetworkSocket.LimitedTask.LimitedTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            获取指示能够支持的最大并发级别
            </summary>
        </member>
        <member name="T:NetworkSocket.LimitedTask.ScheduledTasks">
            <summary>
            表示排队中未执行的任务
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.ScheduledTasks.linkedList">
            <summary>
            排队执行的任务链表
            </summary>
        </member>
        <member name="F:NetworkSocket.LimitedTask.ScheduledTasks.SyncRoot">
            <summary>
            获取同步锁
            </summary>
        </member>
        <member name="M:NetworkSocket.LimitedTask.ScheduledTasks.Add(System.Threading.Tasks.Task)">
            <summary>
            添加一个任务到末尾
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:NetworkSocket.LimitedTask.ScheduledTasks.Take">
            <summary>
            从头部获取一个任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.LimitedTask.ScheduledTasks.Remove(System.Threading.Tasks.Task)">
            <summary>
            删除一个任务
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:NetworkSocket.LimitedTask.ScheduledTasks.ToArray">
            <summary>
            转换为数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.WebSocket.ActionContext">
            <summary>
            表示jsonWebSocket的Api执行上下文
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.RequestContext">
            <summary>
            表示jsonWebSocket的请求上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.RequestContext.#ctor(NetworkSocket.WebSocket.JsonWebSocketSession,NetworkSocket.WebSocket.JsonPacket,System.Collections.Generic.IEnumerable{NetworkSocket.WebSocket.JsonWebSocketSession})">
            <summary>
            请求上下文
            </summary>
            <param name="session">当前会话对象</param>
            <param name="packet">数据包对象</param>
            <param name="allSessions">所有会话对象</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.RequestContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.WebSocket.RequestContext.Session">
            <summary>
            获取当前会话对象
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.RequestContext.Packet">
            <summary>
            获取数据包对象
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.RequestContext.AllSessions">
            <summary>
            获取所有会话对象
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.ActionContext.#ctor(NetworkSocket.WebSocket.RequestContext,NetworkSocket.Core.ApiAction)">
            <summary>
            Api行为上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="action">Api行为</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.ActionContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.WebSocket.ActionContext.Action">
            <summary>
            获取Api行为对象
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.ExceptionContext">
            <summary>
            表示jsonWebSocket的Api异常上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.ExceptionContext.#ctor(NetworkSocket.WebSocket.ActionContext,System.Exception)">
            <summary>
            异常上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.ExceptionContext.#ctor(NetworkSocket.WebSocket.RequestContext,System.Exception)">
            <summary>
            异常上下文
            </summary>
            <param name="context">请求上下文</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.ExceptionContext.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.WebSocket.ExceptionContext.Exception">
            <summary>
            获取异常对象
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.ExceptionContext.ExceptionHandled">
            <summary>
            获取或设置异常是否已处理
            设置为true之后有异常不会抛出
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.GlobalFilters">
            <summary>
            JsonWebSocket协议的全局过滤器提供者
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.GlobalFilters.Add(NetworkSocket.Core.IFilter)">
            <summary>
            添加过滤器
            </summary>
            <param name="filter"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:NetworkSocket.WebSocket.JsonWebSocketApiService">
            <summary>
            JsonWebsocket协议的Api服务基类
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute">
            <summary>
            表示jsonWebsocket协议过滤器
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute.OnExecuting(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute.OnExecuted(NetworkSocket.Core.IActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute.OnException(NetworkSocket.Core.IExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute.OnExecuting(NetworkSocket.WebSocket.ActionContext)">
            <summary>
            在执行Api行为前触发       
            </summary>
            <param name="filterContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute.OnExecuted(NetworkSocket.WebSocket.ActionContext)">
            <summary>
            在执行Api行为后触发
            </summary>
            <param name="filterContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketFilterAttribute.OnException(NetworkSocket.WebSocket.ExceptionContext)">
            <summary>
            在Api执行中异常时触发
            </summary>
            <param name="filterContext">上下文</param>
        </member>
        <member name="T:NetworkSocket.WebSocket.IJsonWebSocketApiService">
            <summary>
            定义jsonWebsocket协议的Api服务
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.IJsonWebSocketApiService.Execute(NetworkSocket.WebSocket.ActionContext)">
            <summary>
            执行Api行为
            </summary>              
            <param name="actionContext">Api行为上下文</param>      
        </member>
        <member name="F:NetworkSocket.WebSocket.JsonWebSocketApiService.currentContext">
            <summary>
            线程唯一上下文
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.NetworkSocket#WebSocket#IJsonWebSocketApiService#Execute(NetworkSocket.WebSocket.ActionContext)">
            <summary>
            执行Api行为
            </summary>   
            <param name="actionContext">上下文</param>      
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.ProcessExecutingException(NetworkSocket.WebSocket.ActionContext,System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},System.Exception)">
            <summary>
            处理Api行为执行过程中产生的异常
            </summary>
            <param name="actionContext">上下文</param>
            <param name="actionfilters">过滤器</param>
            <param name="exception">异常项</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.ExecuteAction(NetworkSocket.WebSocket.ActionContext,System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter})">
            <summary>
            调用自身实现的Api行为
            将返回值发送给客户端        
            </summary>       
            <param name="actionContext">上下文</param>       
            <param name="filters">过滤器</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.ExecFiltersBeforeAction(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.WebSocket.ActionContext)">
            <summary>
            在Api行为前 执行过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="actionContext">上下文</param>   
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.ExecFiltersAfterAction(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.WebSocket.ActionContext)">
            <summary>
            在Api行为后执行过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="actionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.ExecExceptionFilters(System.Collections.Generic.IEnumerable{NetworkSocket.Core.IFilter},NetworkSocket.WebSocket.ExceptionContext)">
            <summary>
            执行异常过滤器
            </summary>       
            <param name="filters">Api行为过滤器</param>
            <param name="exceptionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.Dispose">
            <summary>
            关闭和释放所有相关资源
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketApiService.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketApiService.CurrentContext">
            <summary>
            获取当前Api行为上下文
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketApiService.Server">
            <summary>
            获取关联的服务器实例
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketApiService.IsDisposed">
            <summary>
            获取对象是否已释放
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.JsonPacket">
            <summary>
            Json格式数据包
            </summary>    
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonPacket.api">
            <summary>
            获取或设置请求的Api名称
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonPacket.fromClient">
            <summary>
            获取或设置是否来自客户端
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonPacket.id">
            <summary>
            获取或设置数据包的唯一标识符
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonPacket.state">
            <summary>
            获取或设置返回的数据是否正常   
            如果返回false，body是异常内容
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonPacket.body">
            <summary>
            获取或设置发送或返回的内容体
            发送时为api的参数值数组
            接收时为远程api的返回内容    
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.JsonWebSocketServer">
            <summary>
            表示基于Json文本协议通讯的WebSocket服务
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.WebSocketServerBase`1">
            <summary>
            WebSocket服务抽象类
            只支持 RFC 6455 协议
            </summary>
            <typeparam name="T">会话类型</typeparam>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnReceive(`0,NetworkSocket.ReceiveStream)">
            <summary>
            当接收到会话对象的数据时，将触发此方法  
            </summary>
            <param name="session">会话对象</param>
            <param name="buffer">接收到的历史数据</param>   
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.ProcessHandshake(`0,NetworkSocket.ReceiveStream)">
            <summary>
            处理握手        
            </summary>
            <param name="session">会话对象</param>
            <param name="buffer">接收到的数据</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.ProcessRequest(`0,NetworkSocket.ReceiveStream)">
            <summary>
            处理请求
            </summary>
            <param name="session">会话对象</param>
            <param name="buffer">接收到的历史数据</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.GetFrameRequestsFromBuffer(NetworkSocket.ReceiveStream)">
            <summary>
            解析请求帧
            </summary>
            <param name="buffer">接收到的历史数据</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnRecvRequest(`0,NetworkSocket.WebSocket.FrameRequest)">
            <summary>
            收到到数据帧请求
            </summary>
            <param name="session">会话对象</param>
            <param name="request">数据帧</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnHandshake(`0,NetworkSocket.Http.HttpRequest)">
            <summary>
            当收到握手请求时，将触发此方法
            返回true说明握手通过
            否则基础服务将自动安全关闭客户端对象
            </summary>
            <param name="session">会话对象</param>
            <param name="request">握手请求</param>     
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnText(`0,System.String)">
            <summary>
            收到文本请求类型时触发此方法
            </summary>
            <param name="session">会话对象</param>
            <param name="content">文本内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnBinary(`0,System.Byte[])">
            <summary>
            收到二进制类型请求时触发此方法
            </summary>
            <param name="session">会话对象</param>
            <param name="content">二进制内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnPing(`0,System.Byte[])">
            <summary>
            收到Ping请求时触发此方法
            在触发此方法之前，基础服务已自动将Pong回复此会话
            </summary>
            <param name="session">会话对象</param>
            <param name="content">二进制内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnPong(`0,System.Byte[])">
            <summary>
            Ping后会话对象将回复Pong触发此方法
            </summary>
            <param name="session">会话对象</param>
            <param name="content">二进制内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketServerBase`1.OnClose(`0,NetworkSocket.WebSocket.StatusCodes)">
            <summary>
            收到会话的关闭信息
            在触发此方法后，基础服务将自动安全回收此会话对象
            </summary>
            <param name="session">会话对象</param>
            <param name="code">关闭码</param>
        </member>
        <member name="T:NetworkSocket.WebSocket.IJsonWebSocketServer">
            <summary>
            定义基于Json文本协议通讯的WebSocket服务
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.IJsonWebSocketServer.JsonSerializer">
            <summary>
            获取或设置Json序列化工具       
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.JsonWebSocketServer.apiActionList">
            <summary>
            所有Api行为
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.#ctor">
            <summary>
            JsonWebSocket服务端
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.BindService(System.Reflection.Assembly)">
            <summary>
            绑定程序集下所有实现IJsonWebSocketApiService的服务
            </summary>
            <param name="assembly">程序集</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.BindService``1">
            <summary>
            绑定服务
            </summary>
            <typeparam name="T">Api服务类型</typeparam>             
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>  
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.BindService(System.Type[])">
            <summary>
            绑定服务
            </summary>
            <param name="apiServiceType">Api服务类型</param>       
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.BindService(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            绑定服务
            </summary>
            <param name="apiServiceType">Api服务类型</param>       
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.OnCreateSession">
            <summary>
            创建新的会话对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.OnText(NetworkSocket.WebSocket.JsonWebSocketSession,System.String)">
            <summary>
            接收到文本信息时
            </summary>
            <param name="session">会话对象</param>
            <param name="content">内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.TryGetJsonPacket(System.String)">
            <summary>
            获取数据包
            </summary>     
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.ProcessRemoteException(NetworkSocket.WebSocket.RequestContext)">
            <summary>
            处理远返回的程异常
            </summary>
            <param name="requestContext">请求上下文</param>     
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.ProcessRequest(NetworkSocket.WebSocket.RequestContext)">
            <summary>
            处理正常的数据请求
            </summary>
            <param name="requestContext">请求上下文</param>       
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.GetApiAction(NetworkSocket.WebSocket.RequestContext)">
            <summary>
            获取Api行为
            </summary>
            <param name="requestContext">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.GetFastApiService(NetworkSocket.WebSocket.ActionContext)">
            <summary>
            获取JsonWebSocketApiService实例
            </summary>
            <param name="actionContext">Api行为上下文</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.ExecGlobalExceptionFilters(NetworkSocket.WebSocket.ExceptionContext)">
            <summary>
            执行异常过滤器
            </summary>         
            <param name="exceptionContext">上下文</param>       
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketServer.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.PacketIdProvider">
            <summary>
            获取数据包ID生成提供者
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.TaskSetActionTable">
            <summary>
            获取任务行为记录表
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.TimeOut">
            <summary>
            获取或设置请求等待超时时间(毫秒)    
            默认30秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.JsonSerializer">
            <summary>
            获取或设置序列化工具
            默认是Json序列化
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.GlobalFilters">
            <summary>
            获取全局过滤器
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.DependencyResolver">
            <summary>
            获取或设置依赖关系解析提供者
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketServer.FilterAttributeProvider">
            <summary>
            获取或设置Api行为特性过滤器提供者
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.JsonWebSocketSession">
            <summary>
            表示JsonWebSocket的会话对象
            不可继承
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.WebSocketSession">
            <summary>
            WebSocket会话对象
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketSession.SendResponse(NetworkSocket.WebSocket.Response)">
            <summary>
            发送回复数据
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>   
            <param name="response">回复内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketSession.SendText(System.String)">
            <summary>
            发送文本消息
            </summary>     
            <param name="content">文本内容</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketSession.SendBinary(System.Byte[])">
            <summary>
            发送二进制数据
            </summary>       
            <param name="content">二进制数据</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketSession.Close(NetworkSocket.WebSocket.StatusCodes)">
            <summary>
            正常关闭客户端
            </summary>       
            <param name="code">关闭码</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketSession.Close(NetworkSocket.WebSocket.StatusCodes,System.String)">
            <summary>
            正常关闭客户端
            </summary>      
            <param name="code">关闭码</param>
            <param name="reason">原因</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.WebSocketSession.Ping(System.Byte[])">
            <summary>
            ping指令
            远程将回复pong
            </summary>
            <param name="contents">内容</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketSession.#ctor(NetworkSocket.WebSocket.JsonWebSocketServer)">
            <summary>
            JsonWebSocket的客户端对象
            </summary>
            <param name="server">服务器实例</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketSession.InvokeApi(System.String,System.Object[])">
            <summary>
            调用远程端实现的服务方法        
            </summary>       
            <param name="api">api</param>
            <param name="parameters">参数列表</param>  
            <exception cref="T:System.Net.Sockets.SocketException"></exception>      
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>       
        </member>
        <member name="M:NetworkSocket.WebSocket.JsonWebSocketSession.InvokeApi``1(System.String,System.Object[])">
            <summary>
            调用客户端实现的服务方法     
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>        
            <param name="api">api</param>
            <param name="parameters">参数</param> 
            <exception cref="T:System.Net.Sockets.SocketException"></exception>         
            <exception cref="T:NetworkSocket.Exceptions.SerializerException"></exception>
            <returns>远程数据任务</returns>  
        </member>
        <member name="P:NetworkSocket.WebSocket.JsonWebSocketSession.Server">
            <summary>
            获取服务器实例
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.Common">
            <summary>
            JsonWebSocket公共类
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.Common.GetServiceApiActions(System.Type)">
            <summary>
            获取服务类型的Api行为
            </summary>
            <param name="seviceType">服务类型</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.Common.SetApiActionTaskResult(NetworkSocket.WebSocket.RequestContext,NetworkSocket.WebSocket.TaskSetActionTable)">
            <summary>
            设置Api行为返回的任务结果
            </summary>
            <param name="requestContext">上下文</param>
            <param name="taskSetActionTable">任务行为表</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.Common.SetApiActionTaskException(NetworkSocket.WebSocket.TaskSetActionTable,NetworkSocket.WebSocket.RequestContext)">
            <summary>
            设置Api行为返回的任务异常 
            设置失败则返远程异常对象
            </summary>   
            <param name="taskSetActionTable">任务行为表</param>
            <param name="requestContext">请求上下文</param>     
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.Common.SetRemoteException(NetworkSocket.Core.IJsonDynamicSerializer,NetworkSocket.WebSocket.ExceptionContext)">
            <summary>       
            设置远程异常
            </summary>
            <param name="serializer">序列化工具</param>
            <param name="exceptionContext">上下文</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.Common.GetApiActionParameters(NetworkSocket.WebSocket.ActionContext)">
            <summary>
            生成Api行为的调用参数
            </summary> 
            <param name="context">上下文</param>        
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.WebSocket.SetTypes">
            <summary>
            任务设置行为
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.SetTypes.SetReturnReult">
            <summary>
            设置远程返回结果
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.SetTypes.SetReturnException">
            <summary>
            设置远程返回的异常
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.SetTypes.SetTimeoutException">
            <summary>
            设置超时引起异常
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.SetTypes.SetShutdownException">
            <summary>
            设置远程端关闭连接异常
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.ITaskSetAction">
            <summary>
            任务设置行为接口
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.ITaskSetAction.SetAction(NetworkSocket.WebSocket.SetTypes,System.Object,NetworkSocket.Core.IJsonDynamicSerializer)">
            <summary>
            设置行为
            </summary>
            <param name="setType">行为类型</param>
            <param name="value">数据值</param>
            <param name="serializer">序列化工具</param>
        </member>
        <member name="P:NetworkSocket.WebSocket.ITaskSetAction.CreateTime">
            <summary>
            获取创建时间
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.TaskSetAction`1">
            <summary>
            任务设置行为信息
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.TaskSetAction`1.taskSource">
            <summary>
            任务源
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetAction`1.#ctor(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            任务设置行为
            </summary>               
            <param name="taskSource">任务源</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetAction`1.SetAction(NetworkSocket.WebSocket.SetTypes,System.Object,NetworkSocket.Core.IJsonDynamicSerializer)">
            <summary>
            设置行为
            </summary>
            <param name="setType">行为类型</param>
            <param name="value">数据值</param>
            <param name="serializer">序列化工具</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetAction`1.SetResult(System.Object,NetworkSocket.Core.IJsonDynamicSerializer)">
            <summary>
            设置结果
            </summary>
            <param name="value">数据</param>
            <param name="serializer">序列化工具</param>
        </member>
        <member name="P:NetworkSocket.WebSocket.TaskSetAction`1.CreateTime">
            <summary>
            获取创建时间
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.TaskSetActionTable">
            <summary>
            任务行为表
            自带超时检测功能
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.TaskSetActionTable.timeOut">
            <summary>
            超时时间
            </summary>       
        </member>
        <member name="F:NetworkSocket.WebSocket.TaskSetActionTable.table">
            <summary>
            任务行为字典
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.#ctor">
            <summary>
            任务行为表
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.CheckTaskActionTimeout">
            <summary>
            检测任务行为的超时
            </summary>       
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.ProcessIfTimeout(System.Int64)">
            <summary>
            如果超时了就处理超时并返回true
            否则返回false
            </summary>
            <param name="key">值</param>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.Add(System.Int64,NetworkSocket.WebSocket.ITaskSetAction)">
            <summary>
            添加回调信息记录       
            </summary>
            <param name="key">键值</param>
            <param name="taskSetAction">设置行为</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.Take(System.Int64)">
            <summary>      
            获取并移除与key匹配值
            如果没有匹配项，返回null
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.TaskSetActionTable.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.TaskSetActionTable.TimeOut">
            <summary>
            获取或设置超时时间(毫秒)
            默认30秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:NetworkSocket.WebSocket.FrameCodes">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.FrameCodes.Continuation">
            <summary>
            后续帧
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.FrameCodes.Text">
            <summary>
            文本帧
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.FrameCodes.Binary">
            <summary>
            二进制帧
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.FrameCodes.Close">
            <summary>
            连接关闭
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.FrameCodes.Ping">
            <summary>
            ping
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.FrameCodes.Pong">
            <summary>
            pong
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.FrameRequest">
            <summary>
            表示请求帧
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.FrameRequest.From(NetworkSocket.ReceiveStream)">
            <summary>
            解析请求的数据
            返回请求数据包
            </summary>
            <param name="buffer">所有收到的数据</param>  
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.Fin">
            <summary>
            获取是否已完成
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.Rsv">
            <summary>
            获取保存位
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.Frame">
            <summary>
            获取帧类型
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.Mask">
            <summary>
            获取是否有掩码
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.ContentLength">
            <summary>
            获取内容长度
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.MaskingKey">
            <summary>
            获取掩码
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameRequest.Content">
            <summary>
            获取请求帧的内容
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.FrameResponse">
            <summary>
            表示帧类型回复对象
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.Response">
            <summary>
            表示回复对象抽象类
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.Response.ToByteRange">
            <summary>
            转换ByteArray类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.FrameResponse.#ctor(NetworkSocket.WebSocket.FrameCodes,System.Byte[])">
            <summary>
            回复对象
            </summary>
            <param name="frame">帧类型</param>
            <param name="content">内容</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.WebSocket.FrameResponse.ToByteRange">
            <summary>
            转换为ByteRange
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameResponse.Frame">
            <summary>
            获取帧类型
            </summary>
        </member>
        <member name="P:NetworkSocket.WebSocket.FrameResponse.Content">
            <summary>
            获取回复内容
            </summary>
        </member>
        <member name="T:NetworkSocket.WebSocket.HandshakeResponse">
            <summary>
            表示握手回复
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.HandshakeResponse.request">
            <summary>
            握手请求
            </summary>
        </member>
        <member name="M:NetworkSocket.WebSocket.HandshakeResponse.#ctor(NetworkSocket.Http.HttpRequest)">
            <summary>
            表示握手回复
            </summary>
            <param name="request">握手请求</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NetworkSocket.WebSocket.HandshakeResponse.CreateResponseKey">
            <summary>
            生成回复的key
            </summary>      
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.WebSocket.HandshakeResponse.ToByteRange">
            <summary>
            转换为二进制数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.WebSocket.StatusCodes">
            <summary>
            状态码
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.NormalClosure">
            <summary>
            正常关闭
            1000
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.GoingAway">
            <summary>
            终端已离开
            1001
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.ProtocolError">
            <summary>
            协议错误
            1002
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.UnsupportedDataType">
            <summary>
            不支持的数据类型
            1003
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.NoStatusReceived">
            <summary>
            预留
            1005
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.AbnormalClosure">
            <summary>
            异常关闭
            1006
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.InvalidFramePayloadData">
            <summary>
            无效数据
            1007
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.PolicyViolation">
            <summary>
            策略错误
            1008
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.MessageTooBig">
            <summary>
            消息内容过长
            1009
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.MandatoryExt">
            <summary>
            委托扩展
            1010
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.InternalServerError">
            <summary>
            服务器内部错误
            1011
            </summary>
        </member>
        <member name="F:NetworkSocket.WebSocket.StatusCodes.TLSHandshake">
            <summary>
            安全握手
            1015
            </summary>
        </member>
    </members>
</doc>
